/*
    This file was generated automatically by Alchitry Labs 2.0.24-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alchitry_top (
        input wire clk,
        input wire rst_n,
        output reg [7:0] led,
        input wire usb_rx,
        output reg usb_tx,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        input wire [2:0] p0_button,
        output reg motorIN1,
        output reg motorIN2
    );
    logic rst;
    localparam CLK_FREQ = 24'h989680;
    localparam _MP_STAGES_869476440 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_869476440)
    ) reset_cond (
        .clk(clk),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    logic [2:0] D_motor_speed_d, D_motor_speed_q = 1'h0;
    logic M_motor_motor_direction;
    logic M_motor_in1;
    logic M_motor_in2;
    
    motor motor (
        .motor_speed(D_motor_speed_q),
        .clk(clk),
        .rst(rst),
        .motor_direction(M_motor_motor_direction),
        .in1(M_motor_in1),
        .in2(M_motor_in2)
    );
    
    
    localparam _MP_CLK_FREQ_1791765421 = 24'h989680;
    localparam _MP_BAUD_1791765421 = 17'h186a0;
    logic M_rx_rx;
    logic [7:0] M_rx_data;
    logic M_rx_new_data;
    
    uart_rx #(
        .CLK_FREQ(_MP_CLK_FREQ_1791765421),
        .BAUD(_MP_BAUD_1791765421)
    ) rx (
        .clk(clk),
        .rst(rst),
        .rx(M_rx_rx),
        .data(M_rx_data),
        .new_data(M_rx_new_data)
    );
    
    
    localparam _MP_CLK_FREQ_562938394 = 24'h989680;
    localparam _MP_BAUD_562938394 = 17'h186a0;
    logic M_tx_tx;
    logic M_tx_block;
    logic M_tx_busy;
    logic [7:0] M_tx_data;
    logic M_tx_new_data;
    
    uart_tx #(
        .CLK_FREQ(_MP_CLK_FREQ_562938394),
        .BAUD(_MP_BAUD_562938394)
    ) tx (
        .clk(clk),
        .rst(rst),
        .tx(M_tx_tx),
        .block(M_tx_block),
        .busy(M_tx_busy),
        .data(M_tx_data),
        .new_data(M_tx_new_data)
    );
    
    
    logic M_debugger_new_rx;
    logic [7:0] M_debugger_rx_data;
    logic M_debugger_new_tx;
    logic [7:0] M_debugger_tx_data;
    logic M_debugger_tx_busy;
    logic [31:0] M_debugger_motor_speed;
    
    debugger debugger (
        .clk(clk),
        .rst(rst),
        .new_rx(M_debugger_new_rx),
        .rx_data(M_debugger_rx_data),
        .new_tx(M_debugger_new_tx),
        .tx_data(M_debugger_tx_data),
        .tx_busy(M_debugger_tx_busy),
        .motor_speed(M_debugger_motor_speed)
    );
    
    
    localparam logic [2:0][0:0] _MP_RISE_1260912965 = {{1'h1, 1'h1, 1'h1}};
    localparam logic [2:0][0:0] _MP_FALL_1260912965 = {{1'h0, 1'h0, 1'h0}};
    logic [2:0] M_p0_button_edge_in;
    logic [2:0] M_p0_button_edge_out;
    
    genvar idx_0_1260912965;
    
    generate
        for (idx_0_1260912965 = 0; idx_0_1260912965 < 3; idx_0_1260912965 = idx_0_1260912965 + 1) begin: forLoop_idx_0_1260912965
            edge_detector #(
                .RISE(_MP_RISE_1260912965[idx_0_1260912965]),
                .FALL(_MP_FALL_1260912965[idx_0_1260912965])
            ) p0_button_edge (
                .clk(clk),
                .in(M_p0_button_edge_in[idx_0_1260912965]),
                .out(M_p0_button_edge_out[idx_0_1260912965])
            );
        end
    endgenerate
    
    
    localparam logic [2:0][23:0] _MP_CLK_FREQ_1490200704 = {{24'h989680, 24'h989680, 24'h989680}};
    localparam _MP_MIN_DELAY_1490200704 = 5'h14;
    localparam _MP_NUM_SYNC_1490200704 = 2'h2;
    logic [2:0] M_p0_button_cond_in;
    logic [2:0] M_p0_button_cond_out;
    
    genvar idx_0_1490200704;
    
    generate
        for (idx_0_1490200704 = 0; idx_0_1490200704 < 3; idx_0_1490200704 = idx_0_1490200704 + 1) begin: forLoop_idx_0_1490200704
            button_conditioner #(
                .CLK_FREQ(_MP_CLK_FREQ_1490200704[idx_0_1490200704]),
                .MIN_DELAY(_MP_MIN_DELAY_1490200704),
                .NUM_SYNC(_MP_NUM_SYNC_1490200704)
            ) p0_button_cond (
                .clk(clk),
                .in(M_p0_button_cond_in[idx_0_1490200704]),
                .out(M_p0_button_cond_out[idx_0_1490200704])
            );
        end
    endgenerate
    
    
    always @* begin
        D_motor_speed_d = D_motor_speed_q;
        
        M_rx_rx = usb_rx;
        usb_tx = M_tx_tx;
        M_debugger_new_rx = M_rx_new_data;
        M_debugger_rx_data = M_rx_data;
        M_tx_new_data = M_debugger_new_tx;
        M_tx_data = M_debugger_tx_data;
        M_debugger_tx_busy = M_tx_busy;
        M_debugger_motor_speed = D_motor_speed_q;
        M_tx_block = 1'h0;
        M_reset_cond_in = ~rst_n;
        rst = M_reset_cond_out;
        led = 8'h0;
        io_segment = 1'h0;
        io_select = 1'h0;
        usb_tx = usb_rx;
        M_p0_button_cond_in = p0_button;
        M_p0_button_edge_in = M_p0_button_cond_out;
        M_motor_motor_direction = 1'h1;
        motorIN1 = M_motor_in1;
        motorIN2 = M_motor_in2;
        if (M_p0_button_edge_out[1'h0]) begin
            D_motor_speed_d = D_motor_speed_q + 1'h1;
        end
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_motor_speed_q <= 1'h0;
        end else begin
            D_motor_speed_q <= D_motor_speed_d;
        end
    end
endmodule