/*
    This file was generated automatically by Alchitry Labs 2.0.24-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alchitry_top (
        input wire clk,
        input wire rst_n,
        output reg [7:0] led,
        input wire usb_rx,
        output reg usb_tx,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        input wire [4:0] io_button,
        input wire [2:0][7:0] io_dip
    );
    logic rst;
    localparam CLK_FREQ = 27'h5f5e100;
    localparam _MP_STAGES_334206166 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_334206166)
    ) reset_cond (
        .clk(clk),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    localparam logic [4:0][0:0] _MP_RISE_371800028 = {{1'h1, 1'h1, 1'h1, 1'h1, 1'h1}};
    localparam logic [4:0][0:0] _MP_FALL_371800028 = {{1'h0, 1'h0, 1'h0, 1'h0, 1'h0}};
    logic [4:0] M_io_button_edge_in;
    logic [4:0] M_io_button_edge_out;
    
    genvar idx_0_371800028;
    
    generate
        for (idx_0_371800028 = 0; idx_0_371800028 < 5; idx_0_371800028 = idx_0_371800028 + 1) begin: forLoop_idx_0_371800028
            edge_detector #(
                .RISE(_MP_RISE_371800028[idx_0_371800028]),
                .FALL(_MP_FALL_371800028[idx_0_371800028])
            ) io_button_edge (
                .clk(clk),
                .in(M_io_button_edge_in[idx_0_371800028]),
                .out(M_io_button_edge_out[idx_0_371800028])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][26:0] _MP_CLK_FREQ_986159324 = {{27'h5f5e100, 27'h5f5e100, 27'h5f5e100, 27'h5f5e100, 27'h5f5e100}};
    localparam _MP_MIN_DELAY_986159324 = 5'h14;
    localparam _MP_NUM_SYNC_986159324 = 2'h2;
    logic [4:0] M_io_button_cond_in;
    logic [4:0] M_io_button_cond_out;
    
    genvar idx_0_986159324;
    
    generate
        for (idx_0_986159324 = 0; idx_0_986159324 < 5; idx_0_986159324 = idx_0_986159324 + 1) begin: forLoop_idx_0_986159324
            button_conditioner #(
                .CLK_FREQ(_MP_CLK_FREQ_986159324[idx_0_986159324]),
                .MIN_DELAY(_MP_MIN_DELAY_986159324),
                .NUM_SYNC(_MP_NUM_SYNC_986159324)
            ) io_button_cond (
                .clk(clk),
                .in(M_io_button_cond_in[idx_0_986159324]),
                .out(M_io_button_cond_out[idx_0_986159324])
            );
        end
    endgenerate
    
    
    localparam _MP_WIDTH_1536520322 = 4'h9;
    localparam _MP_TOP_1536520322 = 9'h17d;
    localparam _MP_DIV_1536520322 = 5'h12;
    logic [8:0] M_pwm_value;
    logic M_pwm_update;
    logic M_pwm_pulse;
    
    pwm #(
        .WIDTH(_MP_WIDTH_1536520322),
        .TOP(_MP_TOP_1536520322),
        .DIV(_MP_DIV_1536520322)
    ) pwm (
        .clk(clk),
        .rst(rst),
        .value(M_pwm_value),
        .update(M_pwm_update),
        .pulse(M_pwm_pulse)
    );
    
    
    logic [8:0] D_value_d, D_value_q = 8'hbe;
    always @* begin
        D_value_d = D_value_q;
        
        M_reset_cond_in = ~rst_n;
        rst = M_reset_cond_out;
        led = 8'h0;
        io_led = {{8'h0, 8'h0, 8'h0}};
        io_segment = 1'h0;
        io_select = 1'h0;
        usb_tx = usb_rx;
        M_io_button_cond_in = io_button;
        M_io_button_edge_in = M_io_button_cond_out;
        D_value_d = D_value_q;
        M_pwm_value = D_value_q;
        M_pwm_update = 1'h1;
        if (M_io_button_edge_out[1'h0]) begin
            D_value_d = D_value_q + 4'ha;
        end
        if (M_io_button_edge_out[2'h2]) begin
            D_value_d = D_value_q - 4'ha;
        end
        io_led[1'h0][1'h0] = M_pwm_pulse;
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_value_q <= 8'hbe;
        end else begin
            D_value_q <= D_value_d;
        end
    end
endmodule