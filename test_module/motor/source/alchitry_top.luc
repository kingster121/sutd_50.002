module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_segment[8],   // 7-segment LEDs on IO Shield
    output io_select[4],    // Digit select on IO Shield
    input p0_button[3],
    output motorIN1,
    output motorIN2
) {
    sig rst                 // reset signal
    const CLK_FREQ = $is_sim() ? 1000 : 10_000_000
    
    // const CLOCK_DIVIDER = 15 // 10MHz = 100ns. To get 1ms = 100ns * 2^14
    
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond
        
        // counter slow_clk(#SIZE(1), #DIV(CLOCK_DIVIDER), .rst(rst)) 
        // edge_detector slow_clk_edge(#RISE(1), #FALL(0), .in(slow_clk.value))
        
        .rst(rst) {
            dff motor_speed[3](#INIT(0))
            motor motor(.motor_speed(motor_speed.q))
            
            // rx and tx for serial debugging
            #BAUD(100_000), #CLK_FREQ(CLK_FREQ) {
                uart_rx rx
                uart_tx tx
            }
            // Debugger module
            debugger debugger
        }
        
        
        // Button edge detector and conditioner
        edge_detector p0_button_edge[3](#RISE(3x{{1}}), #FALL(3x{{0}}))
        button_conditioner p0_button_cond[3](#CLK_FREQ(3x{{CLK_FREQ}})) 
        
        

    }

    always {
        // DEBUGGER
        rx.rx = usb_rx          // connect rx input
        usb_tx = tx.tx          // connect tx output
        
        debugger.new_rx = rx.new_data
        debugger.rx_data = rx.data
        
        tx.new_data = debugger.new_tx
        tx.data = debugger.tx_data
        debugger.tx_busy = tx.busy
        
        debugger.motor_speed = motor_speed.q
        
        tx.block = 0            // no flow control, do not block
        
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
        
        led = 8h00              // turn LEDs off
        io_segment = 0
        io_select = 0
        
        usb_tx = usb_rx         // loop serial port
        
        p0_button_cond.in = p0_button
        p0_button_edge.in = p0_button_cond.out
        
        // MOTOR_SPEED TEST
        motor.motor_direction = 1
        motorIN1 = motor.in1
        motorIN2 = motor.in2
        if (p0_button_edge.out[0])
            motor_speed.d = motor_speed.q + 1

    }
}