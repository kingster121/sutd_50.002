/*
    This file was generated automatically by Alchitry Labs 2.0.24-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alchitry_top (
        input wire clk,
        input wire rst_n,
        output reg [7:0] led,
        input wire usb_rx,
        output reg usb_tx,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        input wire [2:0][7:0] io_dip
    );
    logic rst;
    logic [3:0][3:0] digits;
    localparam CLK_FREQ = 24'h989680;
    localparam SEG_REFRESH = 4'ha;
    localparam _MP_STAGES_597892745 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_597892745)
    ) reset_cond (
        .clk(clk),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    logic [1:0] D_seg_multiplex_d, D_seg_multiplex_q = 1'h0;
    localparam _MP_SIZE_993290830 = 1'h1;
    localparam _MP_DIV_993290830 = 4'ha;
    localparam _MP_TOP_993290830 = 1'h0;
    localparam _MP_UP_993290830 = 1'h1;
    logic [0:0] M_seg_clk_value;
    
    counter #(
        .SIZE(_MP_SIZE_993290830),
        .DIV(_MP_DIV_993290830),
        .TOP(_MP_TOP_993290830),
        .UP(_MP_UP_993290830)
    ) seg_clk (
        .clk(clk),
        .rst(rst),
        .value(M_seg_clk_value)
    );
    
    
    localparam _MP_RISE_810457851 = 1'h1;
    localparam _MP_FALL_810457851 = 1'h0;
    logic M_seg_clk_edge_out;
    
    edge_detector #(
        .RISE(_MP_RISE_810457851),
        .FALL(_MP_FALL_810457851)
    ) seg_clk_edge (
        .in(M_seg_clk_value),
        .clk(clk),
        .out(M_seg_clk_edge_out)
    );
    
    
    localparam _MP_WIDTH_83057611 = 2'h2;
    logic [3:0] M_seg_selector_out;
    
    decoder #(
        .WIDTH(_MP_WIDTH_83057611)
    ) seg_selector (
        .in(D_seg_multiplex_q),
        .out(M_seg_selector_out)
    );
    
    
    logic [3:0][6:0] M_encoder_segs;
    logic [3:0][3:0] M_encoder_char = digits;
    
    genvar idx_0_2063854253;
    
    generate
        for (idx_0_2063854253 = 0; idx_0_2063854253 < 4; idx_0_2063854253 = idx_0_2063854253 + 1) begin: forLoop_idx_0_2063854253
            seven_segment_encoder encoder (
                .char(M_encoder_char[idx_0_2063854253]),
                .segs(M_encoder_segs[idx_0_2063854253])
            );
        end
    endgenerate
    
    
    always @* begin
        D_seg_multiplex_d = D_seg_multiplex_q;
        
        M_reset_cond_in = ~rst_n;
        rst = M_reset_cond_out;
        led = 8'h0;
        io_led = {{8'hff, 8'hff, 8'hff}};
        usb_tx = usb_rx;
        D_seg_multiplex_d = D_seg_multiplex_q;
        if (M_seg_clk_edge_out) begin
            D_seg_multiplex_d = D_seg_multiplex_q + 1'h1;
        end
        digits[1'h0] = 4'h7;
        digits[1'h1] = 4'hf;
        digits[2'h2] = 4'hf;
        digits[2'h3] = 4'h4;
        io_segment = M_encoder_segs[D_seg_multiplex_q];
        io_select = ~(1'h1 << D_seg_multiplex_q);
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_seg_multiplex_q <= 1'h0;
        end else begin
            D_seg_multiplex_q <= D_seg_multiplex_d;
        end
    end
endmodule