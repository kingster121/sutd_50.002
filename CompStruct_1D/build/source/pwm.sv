/*
    This file was generated automatically by Alchitry Labs 2.0.24-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module pwm #(
        parameter WIDTH = 4'h8,
        parameter TOP = 1'h0,
        parameter DIV = 1'h0
    ) (
        input wire clk,
        input wire rst,
        input wire [(WIDTH)-1:0] value,
        input wire update,
        output reg pulse
    );
<<<<<<< HEAD
    localparam _MP_SIZE_1100000838 = WIDTH;
    localparam _MP_DIV_1100000838 = DIV;
    localparam _MP_TOP_1100000838 = TOP;
    localparam _MP_UP_1100000838 = 1'h1;
    logic [(_MP_SIZE_1100000838)-1:0] M_ctr_value;
    
    counter #(
        .SIZE(_MP_SIZE_1100000838),
        .DIV(_MP_DIV_1100000838),
        .TOP(_MP_TOP_1100000838),
        .UP(_MP_UP_1100000838)
=======
    localparam _MP_SIZE_1538575499 = WIDTH;
    localparam _MP_DIV_1538575499 = DIV;
    localparam _MP_TOP_1538575499 = TOP;
    localparam _MP_UP_1538575499 = 1'h1;
    logic [(_MP_SIZE_1538575499)-1:0] M_ctr_value;
    
    counter #(
        .SIZE(_MP_SIZE_1538575499),
        .DIV(_MP_DIV_1538575499),
        .TOP(_MP_TOP_1538575499),
        .UP(_MP_UP_1538575499)
>>>>>>> parent of 002b953 (Working V1.1)
    ) ctr (
        .clk(clk),
        .rst(rst),
        .value(M_ctr_value)
    );
    
    
    logic [(WIDTH)-1:0] D_cur_value_d, D_cur_value_q = 0;
    logic D_need_update_d, D_need_update_q = 0;
    logic [(WIDTH)-1:0] D_next_value_d, D_next_value_q = 0;
    always @* begin
        D_cur_value_d = D_cur_value_q;
        D_need_update_d = D_need_update_q;
        D_next_value_d = D_next_value_q;
        
        if (!(|M_ctr_value) && D_need_update_q) begin
            D_cur_value_d = D_next_value_q;
            D_need_update_d = 1'h0;
        end
        if (update) begin
            D_next_value_d = value;
            D_need_update_d = 1'h1;
        end
        pulse = M_ctr_value < D_cur_value_q;
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_cur_value_q <= 0;
            D_need_update_q <= 0;
        end else begin
            D_cur_value_q <= D_cur_value_d;
            D_need_update_q <= D_need_update_d;
        end
    end
    always @(posedge (clk)) begin
        D_next_value_q <= D_next_value_d;
        
    end
endmodule