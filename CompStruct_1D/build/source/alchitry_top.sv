/*
    This file was generated automatically by Alchitry Labs 2.0.24-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alchitry_top (
        input wire clk,
        input wire rst_n,
        output reg [7:0] led,
        input wire usb_rx,
        output reg usb_tx,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        input wire [4:0] io_button,
        input wire [2:0][7:0] io_dip,
        output reg p0l0,
        output reg p0l1,
        output reg p1l0,
        output reg p1l1
    );
    logic rst;
    localparam CLOCK_DIVIDER = 5'h1a;
    localparam CLK_FREQ = 27'h5f5e100;
    localparam SEG_REFRESH = 4'ha;
    localparam _MP_STAGES_1096590319 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_1096590319)
    ) reset_cond (
        .clk(clk),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    localparam logic [4:0][0:0] _MP_RISE_766992168 = {{1'h1, 1'h1, 1'h1, 1'h1, 1'h1}};
    localparam logic [4:0][0:0] _MP_FALL_766992168 = {{1'h0, 1'h0, 1'h0, 1'h0, 1'h0}};
    logic [4:0] M_io_button_edge_in;
    logic [4:0] M_io_button_edge_out;
    
    genvar idx_0_766992168;
    
    generate
        for (idx_0_766992168 = 0; idx_0_766992168 < 5; idx_0_766992168 = idx_0_766992168 + 1) begin: forLoop_idx_0_766992168
            edge_detector #(
                .RISE(_MP_RISE_766992168[idx_0_766992168]),
                .FALL(_MP_FALL_766992168[idx_0_766992168])
            ) io_button_edge (
                .clk(clk),
                .in(M_io_button_edge_in[idx_0_766992168]),
                .out(M_io_button_edge_out[idx_0_766992168])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][26:0] _MP_CLK_FREQ_972742522 = {{27'h5f5e100, 27'h5f5e100, 27'h5f5e100, 27'h5f5e100, 27'h5f5e100}};
    localparam _MP_MIN_DELAY_972742522 = 5'h14;
    localparam _MP_NUM_SYNC_972742522 = 2'h2;
    logic [4:0] M_io_button_cond_in;
    logic [4:0] M_io_button_cond_out;
    
    genvar idx_0_972742522;
    
    generate
        for (idx_0_972742522 = 0; idx_0_972742522 < 5; idx_0_972742522 = idx_0_972742522 + 1) begin: forLoop_idx_0_972742522
            button_conditioner #(
                .CLK_FREQ(_MP_CLK_FREQ_972742522[idx_0_972742522]),
                .MIN_DELAY(_MP_MIN_DELAY_972742522),
                .NUM_SYNC(_MP_NUM_SYNC_972742522)
            ) io_button_cond (
                .clk(clk),
                .in(M_io_button_cond_in[idx_0_972742522]),
                .out(M_io_button_cond_out[idx_0_972742522])
            );
        end
    endgenerate
    
    
    logic [1:0] D_seg_multiplex_d, D_seg_multiplex_q = 1'h0;
    localparam _MP_SIZE_132365479 = 1'h1;
    localparam _MP_DIV_132365479 = 5'h1a;
    localparam _MP_TOP_132365479 = 1'h0;
    localparam _MP_UP_132365479 = 1'h1;
    logic [0:0] M_slow_clk_value;
    
    counter #(
        .SIZE(_MP_SIZE_132365479),
        .DIV(_MP_DIV_132365479),
        .TOP(_MP_TOP_132365479),
        .UP(_MP_UP_132365479)
    ) slow_clk (
        .clk(clk),
        .rst(rst),
        .value(M_slow_clk_value)
    );
    
    
    localparam _MP_SIZE_835784005 = 1'h1;
    localparam _MP_DIV_835784005 = 4'ha;
    localparam _MP_TOP_835784005 = 1'h0;
    localparam _MP_UP_835784005 = 1'h1;
    logic [0:0] M_seg_clk_value;
    
    counter #(
        .SIZE(_MP_SIZE_835784005),
        .DIV(_MP_DIV_835784005),
        .TOP(_MP_TOP_835784005),
        .UP(_MP_UP_835784005)
    ) seg_clk (
        .clk(clk),
        .rst(rst),
        .value(M_seg_clk_value)
    );
    
    
    logic [2:0] D_motor_speed_d, D_motor_speed_q = 1'h0;
    logic D_motor_direction_d, D_motor_direction_q = 1'h0;
    logic M_motor_in1;
    logic M_motor_in2;
    
    motor motor (
        .motor_speed(D_motor_speed_q),
        .motor_direction(D_motor_direction_q),
        .clk(clk),
        .rst(rst),
        .in1(M_motor_in1),
        .in2(M_motor_in2)
    );
    
    
    localparam _MP_RISE_703520510 = 1'h1;
    localparam _MP_FALL_703520510 = 1'h0;
    logic M_seg_clk_edge_out;
    
    edge_detector #(
        .RISE(_MP_RISE_703520510),
        .FALL(_MP_FALL_703520510)
    ) seg_clk_edge (
        .in(M_seg_clk_value),
        .clk(clk),
        .out(M_seg_clk_edge_out)
    );
    
    
    always @* begin
        D_seg_multiplex_d = D_seg_multiplex_q;
        D_motor_speed_d = D_motor_speed_q;
        D_motor_direction_d = D_motor_direction_q;
        
        M_reset_cond_in = ~rst_n;
        rst = M_reset_cond_out;
        led = 8'h0;
        io_led[2'h2:1'h0] = {{8'h0, 8'h0, 8'h0}};
        io_segment = 8'h0;
        io_select = 4'h0;
        usb_tx = usb_rx;
        p0l0 = 1'h0;
        p0l1 = 1'h0;
        p1l0 = 1'h0;
        p1l1 = 1'h0;
        D_seg_multiplex_d = D_seg_multiplex_q;
        M_io_button_cond_in = io_button;
        M_io_button_edge_in = M_io_button_cond_out;
        io_led[1'h0][1'h0] = M_motor_in1;
        io_led[1'h0][1'h1] = M_motor_in2;
        if (M_io_button_edge_out[1'h0]) begin
            D_motor_speed_d = D_motor_speed_q + 1'h1;
            D_motor_direction_d = 1'h0;
        end
        if (M_io_button_edge_out[2'h2]) begin
            D_motor_speed_d = D_motor_speed_q + 1'h1;
            D_motor_direction_d = 1'h1;
        end
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_seg_multiplex_q <= 1'h0;
            D_motor_speed_q <= 1'h0;
            D_motor_direction_q <= 1'h0;
        end else begin
            D_seg_multiplex_q <= D_seg_multiplex_d;
            D_motor_speed_q <= D_motor_speed_d;
            D_motor_direction_q <= D_motor_direction_d;
        end
    end
endmodule