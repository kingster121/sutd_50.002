/*
    This file was generated automatically by Alchitry Labs 2.0.24-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module debugger (
        input wire clk,
        input wire rst,
        input wire new_rx,
        input wire [7:0] rx_data,
        output reg new_tx,
        output reg [7:0] tx_data,
        input wire tx_busy,
        input wire [31:0] correct_button,
        input wire [31:0] motor_direction,
        input wire [31:0] motor_speed,
        input wire [31:0] p0_score,
        input wire [31:0] p1_score,
        input wire [31:0] correct_button_compare,
        input wire [31:0] counter,
        input wire [31:0] temp,
        input wire [3:0] wa,
        input wire we,
        input wire [31:0] data
    );
    localparam E_States_IDLE = 5'h0;
    localparam E_States_LOAD_DFF = 5'h1;
    localparam E_States_SEND_CORRECT_BUTTON_PREFIX = 5'h2;
    localparam E_States_SEND_CORRECT_BUTTON = 5'h3;
    localparam E_States_SEND_MOTOR_DIRECTION_PREFIX = 5'h4;
    localparam E_States_SEND_MOTOR_DIRECTION = 5'h5;
    localparam E_States_SEND_MOTOR_SPEED_PREFIX = 5'h6;
    localparam E_States_SEND_MOTOR_SPEED = 5'h7;
    localparam E_States_SEND_P0_SCORE_PREFIX = 5'h8;
    localparam E_States_SEND_P0_SCORE = 5'h9;
    localparam E_States_SEND_P1_SCORE_PREFIX = 5'ha;
    localparam E_States_SEND_P1_SCORE = 5'hb;
    localparam E_States_SEND_CORRECT_BUTTON_COMPARE_PREFIX = 5'hc;
    localparam E_States_SEND_CORRECT_BUTTON_COMPARE = 5'hd;
    localparam E_States_SEND_COUNTER_PREFIX = 5'he;
    localparam E_States_SEND_COUNTER = 5'hf;
    localparam E_States_SEND_TEMP_PREFIX = 5'h10;
    localparam E_States_SEND_TEMP = 5'h11;
    localparam E_States_SEND_WA_PREFIX = 5'h12;
    localparam E_States_SEND_WA = 5'h13;
    localparam E_States_SEND_WE_PREFIX = 5'h14;
    localparam E_States_SEND_WE = 5'h15;
    localparam E_States_SEND_DATA_PREFIX = 5'h16;
    localparam E_States_SEND_DATA = 5'h17;
    localparam logic [16:0][7:0] TEXT_CORRECT_BUTTON = {{8'h20, 8'h3a, 8'h6e, 8'h6f, 8'h74, 8'h74, 8'h75, 8'h42, 8'h20, 8'h74, 8'h63, 8'h65, 8'h72, 8'h72, 8'h6f, 8'h43, 8'ha}};
    localparam logic [17:0][7:0] TEXT_MOTOR_DIRECTION = {{8'h20, 8'h3a, 8'h6e, 8'h6f, 8'h69, 8'h74, 8'h63, 8'h65, 8'h72, 8'h69, 8'h44, 8'h20, 8'h72, 8'h6f, 8'h74, 8'h6f, 8'h4d, 8'ha}};
    localparam logic [13:0][7:0] TEXT_MOTOR_SPEED = {{8'h20, 8'h3a, 8'h64, 8'h65, 8'h65, 8'h70, 8'h53, 8'h20, 8'h72, 8'h6f, 8'h74, 8'h6f, 8'h4d, 8'ha}};
    localparam logic [15:0][7:0] TEXT_P0_SCORE = {{8'h20, 8'h3a, 8'h65, 8'h72, 8'h6f, 8'h63, 8'h53, 8'h20, 8'h30, 8'h72, 8'h65, 8'h79, 8'h61, 8'h6c, 8'h50, 8'ha}};
    localparam logic [15:0][7:0] TEXT_P1_SCORE = {{8'h20, 8'h3a, 8'h65, 8'h72, 8'h6f, 8'h63, 8'h53, 8'h20, 8'h31, 8'h72, 8'h65, 8'h79, 8'h61, 8'h6c, 8'h50, 8'ha}};
    localparam logic [24:0][7:0] TEXT_CORRECT_BUTTON_COMPARE = {{8'h20, 8'h3a, 8'h65, 8'h72, 8'h61, 8'h70, 8'h6d, 8'h6f, 8'h43, 8'h20, 8'h6e, 8'h6f, 8'h74, 8'h74, 8'h75, 8'h42, 8'h20, 8'h74, 8'h63, 8'h65, 8'h72, 8'h72, 8'h6f, 8'h43, 8'ha}};
    localparam logic [9:0][7:0] TEXT_COUNTER = {{8'h20, 8'h3a, 8'h72, 8'h65, 8'h74, 8'h6e, 8'h75, 8'h6f, 8'h43, 8'ha}};
    localparam logic [6:0][7:0] TEXT_TEMP = {{8'h20, 8'h3a, 8'h70, 8'h6d, 8'h65, 8'h54, 8'ha}};
    localparam logic [5:0][7:0] TEXT_WA = {{8'h20, 8'h3a, 8'h41, 8'h57, 8'ha, 8'ha}};
    localparam logic [4:0][7:0] TEXT_WE = {{8'h20, 8'h3a, 8'h45, 8'h57, 8'ha}};
    localparam logic [6:0][7:0] TEXT_DATA = {{8'h20, 8'h3a, 8'h61, 8'h74, 8'h61, 8'h44, 8'ha}};
    localparam BIT_0 = 8'h30;
    localparam BIT_1 = 8'h31;
    logic [4:0] D_state_d, D_state_q = 5'h0;
    logic [5:0] D_bit_32_count_d, D_bit_32_count_q = 1'h0;
    logic [0:0] D_bit_1_count_d, D_bit_1_count_q = 1'h0;
    logic [3:0] D_bit_4_count_d, D_bit_4_count_q = 1'h0;
    logic [4:0] D_correct_button_count_d, D_correct_button_count_q = 0;
    logic [4:0] D_motor_direction_count_d, D_motor_direction_count_q = 0;
    logic [3:0] D_motor_speed_count_d, D_motor_speed_count_q = 0;
    logic [3:0] D_p0_score_count_d, D_p0_score_count_q = 0;
    logic [3:0] D_p1_score_count_d, D_p1_score_count_q = 0;
    logic [4:0] D_correct_button_compare_count_d, D_correct_button_compare_count_q = 0;
    logic [3:0] D_counter_count_d, D_counter_count_q = 0;
    logic [2:0] D_temp_count_d, D_temp_count_q = 0;
    logic [2:0] D_wa_count_d, D_wa_count_q = 0;
    logic [2:0] D_we_count_d, D_we_count_q = 0;
    logic [2:0] D_data_count_d, D_data_count_q = 0;
    logic [31:0] D_correct_button_dff_d, D_correct_button_dff_q = 1'h0;
    logic [31:0] D_motor_direction_dff_d, D_motor_direction_dff_q = 1'h0;
    logic [31:0] D_motor_speed_dff_d, D_motor_speed_dff_q = 1'h0;
    logic [31:0] D_p0_score_dff_d, D_p0_score_dff_q = 1'h0;
    logic [31:0] D_p1_score_dff_d, D_p1_score_dff_q = 1'h0;
    logic [31:0] D_correct_button_compare_dff_d, D_correct_button_compare_dff_q = 1'h0;
    logic [31:0] D_counter_dff_d, D_counter_dff_q = 1'h0;
    logic [31:0] D_temp_dff_d, D_temp_dff_q = 1'h0;
    logic [3:0] D_wa_dff_d, D_wa_dff_q = 1'h0;
    logic D_we_dff_d, D_we_dff_q = 1'h0;
    logic [31:0] D_data_dff_d, D_data_dff_q = 1'h0;
    logic send_trigger;
    always @* begin
        D_bit_32_count_d = D_bit_32_count_q;
        D_bit_1_count_d = D_bit_1_count_q;
        D_bit_4_count_d = D_bit_4_count_q;
        D_correct_button_count_d = D_correct_button_count_q;
        D_motor_direction_count_d = D_motor_direction_count_q;
        D_motor_speed_count_d = D_motor_speed_count_q;
        D_p0_score_count_d = D_p0_score_count_q;
        D_p1_score_count_d = D_p1_score_count_q;
        D_correct_button_compare_count_d = D_correct_button_compare_count_q;
        D_counter_count_d = D_counter_count_q;
        D_temp_count_d = D_temp_count_q;
        D_state_d = D_state_q;
        D_correct_button_dff_d = D_correct_button_dff_q;
        D_motor_direction_dff_d = D_motor_direction_dff_q;
        D_motor_speed_dff_d = D_motor_speed_dff_q;
        D_p0_score_dff_d = D_p0_score_dff_q;
        D_p1_score_dff_d = D_p1_score_dff_q;
        D_correct_button_compare_dff_d = D_correct_button_compare_dff_q;
        D_counter_dff_d = D_counter_dff_q;
        D_temp_dff_d = D_temp_dff_q;
        D_wa_dff_d = D_wa_dff_q;
        D_we_dff_d = D_we_dff_q;
        D_data_dff_d = D_data_dff_q;
        D_wa_count_d = D_wa_count_q;
        D_we_count_d = D_we_count_q;
        D_data_count_d = D_data_count_q;
        
        new_tx = 1'h0;
        tx_data = 8'bxxxxxxxx;
        send_trigger = new_rx & (rx_data == 8'h68);
        
        case (D_state_q)
            5'h0: begin
                if (send_trigger & !tx_busy) begin
                    D_bit_32_count_d = 5'h1f;
                    D_bit_1_count_d = 1'h1;
                    D_bit_4_count_d = 2'h3;
                    D_correct_button_count_d = 1'h0;
                    D_motor_direction_count_d = 1'h0;
                    D_motor_speed_count_d = 1'h0;
                    D_p0_score_count_d = 1'h0;
                    D_p1_score_count_d = 1'h0;
                    D_correct_button_compare_count_d = 1'h0;
                    D_counter_count_d = 1'h0;
                    D_temp_count_d = 1'h0;
                    D_state_d = 5'h1;
                end
            end
            5'h1: begin
                D_correct_button_dff_d = correct_button;
                D_motor_direction_dff_d = motor_direction;
                D_motor_speed_dff_d = motor_speed;
                D_p0_score_dff_d = p0_score;
                D_p1_score_dff_d = p1_score;
                D_correct_button_compare_dff_d = correct_button_compare;
                D_counter_dff_d = counter;
                D_temp_dff_d = temp;
                D_wa_dff_d = wa;
                D_we_dff_d = we;
                D_data_dff_d = data;
                D_state_d = 5'h2;
            end
            5'h2: begin
                if (!tx_busy) begin
                    D_correct_button_count_d = D_correct_button_count_q + 1'h1;
                    new_tx = 1'h1;
                    tx_data = TEXT_CORRECT_BUTTON[D_correct_button_count_q];
                    if (D_correct_button_count_q == 6'h10) begin
                        D_state_d = 5'h3;
                    end
                end
            end
            5'h3: begin
                if (!tx_busy) begin
                    D_bit_32_count_d = D_bit_32_count_q - 1'h1;
                    new_tx = 1'h1;
                    if (D_correct_button_dff_q[D_bit_32_count_q] == 1'h1) begin
                        tx_data = 8'h31;
                    end else begin
                        tx_data = 8'h30;
                    end
                    if (D_bit_32_count_q == 1'h0) begin
                        D_bit_32_count_d = 5'h1f;
                        D_state_d = 5'h4;
                    end
                end
            end
            5'h4: begin
                if (!tx_busy) begin
                    D_motor_direction_count_d = D_motor_direction_count_q + 1'h1;
                    new_tx = 1'h1;
                    tx_data = TEXT_MOTOR_DIRECTION[D_motor_direction_count_q];
                    if (D_motor_direction_count_q == 6'h11) begin
                        D_state_d = 5'h5;
                    end
                end
            end
            5'h5: begin
                if (!tx_busy) begin
                    D_bit_32_count_d = D_bit_32_count_q - 1'h1;
                    new_tx = 1'h1;
                    if (D_motor_direction_dff_q[D_bit_32_count_q] == 1'h1) begin
                        tx_data = 8'h31;
                    end else begin
                        tx_data = 8'h30;
                    end
                    if (D_bit_32_count_q == 1'h0) begin
                        D_bit_32_count_d = 5'h1f;
                        D_state_d = 5'h6;
                    end
                end
            end
            5'h6: begin
                if (!tx_busy) begin
                    D_motor_speed_count_d = D_motor_speed_count_q + 1'h1;
                    new_tx = 1'h1;
                    tx_data = TEXT_MOTOR_SPEED[D_motor_speed_count_q];
                    if (D_motor_speed_count_q == 5'hd) begin
                        D_state_d = 5'h7;
                    end
                end
            end
            5'h7: begin
                if (!tx_busy) begin
                    D_bit_32_count_d = D_bit_32_count_q - 1'h1;
                    new_tx = 1'h1;
                    if (D_motor_speed_dff_q[D_bit_32_count_q] == 1'h1) begin
                        tx_data = 8'h31;
                    end else begin
                        tx_data = 8'h30;
                    end
                    if (D_bit_32_count_q == 1'h0) begin
                        D_bit_32_count_d = 5'h1f;
                        D_state_d = 5'h8;
                    end
                end
            end
            5'h8: begin
                if (!tx_busy) begin
                    D_p0_score_count_d = D_p0_score_count_q + 1'h1;
                    new_tx = 1'h1;
                    tx_data = TEXT_P0_SCORE[D_p0_score_count_q];
                    if (D_p0_score_count_q == 6'hf) begin
                        D_state_d = 5'h9;
                    end
                end
            end
            5'h9: begin
                if (!tx_busy) begin
                    D_bit_32_count_d = D_bit_32_count_q - 1'h1;
                    new_tx = 1'h1;
                    if (D_p0_score_dff_q[D_bit_32_count_q] == 1'h1) begin
                        tx_data = 8'h31;
                    end else begin
                        tx_data = 8'h30;
                    end
                    if (D_bit_32_count_q == 1'h0) begin
                        D_bit_32_count_d = 5'h1f;
                        D_state_d = 5'ha;
                    end
                end
            end
            5'ha: begin
                if (!tx_busy) begin
                    D_p1_score_count_d = D_p1_score_count_q + 1'h1;
                    new_tx = 1'h1;
                    tx_data = TEXT_P1_SCORE[D_p1_score_count_q];
                    if (D_p1_score_count_q == 6'hf) begin
                        D_state_d = 5'hb;
                    end
                end
            end
            5'hb: begin
                if (!tx_busy) begin
                    D_bit_32_count_d = D_bit_32_count_q - 1'h1;
                    new_tx = 1'h1;
                    if (D_p1_score_dff_q[D_bit_32_count_q] == 1'h1) begin
                        tx_data = 8'h31;
                    end else begin
                        tx_data = 8'h30;
                    end
                    if (D_bit_32_count_q == 1'h0) begin
                        D_bit_32_count_d = 5'h1f;
                        D_state_d = 5'hc;
                    end
                end
            end
            5'hc: begin
                if (!tx_busy) begin
                    D_correct_button_compare_count_d = D_correct_button_compare_count_q + 1'h1;
                    new_tx = 1'h1;
                    tx_data = TEXT_CORRECT_BUTTON_COMPARE[D_correct_button_compare_count_q];
                    if (D_correct_button_compare_count_q == 6'h18) begin
                        D_state_d = 5'hd;
                    end
                end
            end
            5'hd: begin
                if (!tx_busy) begin
                    D_bit_32_count_d = D_bit_32_count_q - 1'h1;
                    new_tx = 1'h1;
                    if (D_correct_button_compare_dff_q[D_bit_32_count_q] == 1'h1) begin
                        tx_data = 8'h31;
                    end else begin
                        tx_data = 8'h30;
                    end
                    if (D_bit_32_count_q == 1'h0) begin
                        D_bit_32_count_d = 5'h1f;
                        D_state_d = 5'he;
                    end
                end
            end
            5'he: begin
                if (!tx_busy) begin
                    D_counter_count_d = D_counter_count_q + 1'h1;
                    new_tx = 1'h1;
                    tx_data = TEXT_COUNTER[D_counter_count_q];
                    if (D_counter_count_q == 5'h9) begin
                        D_state_d = 5'hf;
                    end
                end
            end
            5'hf: begin
                if (!tx_busy) begin
                    D_bit_32_count_d = D_bit_32_count_q - 1'h1;
                    new_tx = 1'h1;
                    if (D_counter_dff_q[D_bit_32_count_q] == 1'h1) begin
                        tx_data = 8'h31;
                    end else begin
                        tx_data = 8'h30;
                    end
                    if (D_bit_32_count_q == 1'h0) begin
                        D_bit_32_count_d = 5'h1f;
                        D_state_d = 5'h10;
                    end
                end
            end
            5'h10: begin
                if (!tx_busy) begin
                    D_temp_count_d = D_temp_count_q + 1'h1;
                    new_tx = 1'h1;
                    tx_data = TEXT_TEMP[D_temp_count_q];
                    if (D_temp_count_q == 5'h6) begin
                        D_state_d = 5'h11;
                    end
                end
            end
            5'h11: begin
                if (!tx_busy) begin
                    D_bit_32_count_d = D_bit_32_count_q - 1'h1;
                    new_tx = 1'h1;
                    if (D_temp_dff_q[D_bit_32_count_q] == 1'h1) begin
                        tx_data = 8'h31;
                    end else begin
                        tx_data = 8'h30;
                    end
                    if (D_bit_32_count_q == 1'h0) begin
                        D_bit_32_count_d = 5'h1f;
                        D_state_d = 5'h12;
                    end
                end
            end
            5'h12: begin
                if (!tx_busy) begin
                    D_wa_count_d = D_wa_count_q + 1'h1;
                    new_tx = 1'h1;
                    tx_data = TEXT_WA[D_wa_count_q];
                    if (D_wa_count_q == 5'h5) begin
                        D_state_d = 5'h13;
                    end
                end
            end
            5'h13: begin
                if (!tx_busy) begin
                    D_bit_4_count_d = D_bit_4_count_q - 1'h1;
                    new_tx = 1'h1;
                    if (D_wa_dff_q[D_bit_4_count_q] == 1'h1) begin
                        tx_data = 8'h31;
                    end else begin
                        tx_data = 8'h30;
                    end
                    if (D_bit_4_count_q == 1'h0) begin
                        D_bit_4_count_d = 2'h3;
                        D_state_d = 5'h14;
                    end
                end
            end
            5'h14: begin
                if (!tx_busy) begin
                    D_we_count_d = D_we_count_q + 1'h1;
                    new_tx = 1'h1;
                    tx_data = TEXT_WE[D_we_count_q];
                    if (D_we_count_q == 5'h4) begin
                        D_state_d = 5'h15;
                    end
                end
            end
            5'h15: begin
                if (!tx_busy) begin
                    new_tx = 1'h1;
                    if (D_we_dff_q == 1'h1) begin
                        tx_data = 8'h31;
                    end else begin
                        tx_data = 8'h30;
                    end
                    D_state_d = 5'h16;
                end
            end
            5'h16: begin
                if (!tx_busy) begin
                    D_data_count_d = D_data_count_q + 1'h1;
                    new_tx = 1'h1;
                    tx_data = TEXT_DATA[D_data_count_q];
                    if (D_data_count_q == 5'h6) begin
                        D_state_d = 5'h17;
                    end
                end
            end
            5'h17: begin
                if (!tx_busy) begin
                    D_bit_32_count_d = D_bit_32_count_q - 1'h1;
                    new_tx = 1'h1;
                    if (D_data_dff_q[D_bit_32_count_q] == 1'h1) begin
                        tx_data = 8'h31;
                    end else begin
                        tx_data = 8'h30;
                    end
                    if (D_bit_32_count_q == 1'h0) begin
                        D_bit_32_count_d = 5'h1f;
                        D_state_d = 5'h0;
                    end
                end
            end
            default: begin
                D_state_d = 5'h0;
            end
        endcase
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_state_q <= 5'h0;
            D_bit_32_count_q <= 1'h0;
            D_bit_1_count_q <= 1'h0;
            D_bit_4_count_q <= 1'h0;
            D_correct_button_count_q <= 0;
            D_motor_direction_count_q <= 0;
            D_motor_speed_count_q <= 0;
            D_p0_score_count_q <= 0;
            D_p1_score_count_q <= 0;
            D_correct_button_compare_count_q <= 0;
            D_counter_count_q <= 0;
            D_temp_count_q <= 0;
            D_wa_count_q <= 0;
            D_we_count_q <= 0;
            D_data_count_q <= 0;
            D_correct_button_dff_q <= 1'h0;
            D_motor_direction_dff_q <= 1'h0;
            D_motor_speed_dff_q <= 1'h0;
            D_p0_score_dff_q <= 1'h0;
            D_p1_score_dff_q <= 1'h0;
            D_correct_button_compare_dff_q <= 1'h0;
            D_counter_dff_q <= 1'h0;
            D_temp_dff_q <= 1'h0;
            D_wa_dff_q <= 1'h0;
            D_we_dff_q <= 1'h0;
            D_data_dff_q <= 1'h0;
        end else begin
            D_state_q <= D_state_d;
            D_bit_32_count_q <= D_bit_32_count_d;
            D_bit_1_count_q <= D_bit_1_count_d;
            D_bit_4_count_q <= D_bit_4_count_d;
            D_correct_button_count_q <= D_correct_button_count_d;
            D_motor_direction_count_q <= D_motor_direction_count_d;
            D_motor_speed_count_q <= D_motor_speed_count_d;
            D_p0_score_count_q <= D_p0_score_count_d;
            D_p1_score_count_q <= D_p1_score_count_d;
            D_correct_button_compare_count_q <= D_correct_button_compare_count_d;
            D_counter_count_q <= D_counter_count_d;
            D_temp_count_q <= D_temp_count_d;
            D_wa_count_q <= D_wa_count_d;
            D_we_count_q <= D_we_count_d;
            D_data_count_q <= D_data_count_d;
            D_correct_button_dff_q <= D_correct_button_dff_d;
            D_motor_direction_dff_q <= D_motor_direction_dff_d;
            D_motor_speed_dff_q <= D_motor_speed_dff_d;
            D_p0_score_dff_q <= D_p0_score_dff_d;
            D_p1_score_dff_q <= D_p1_score_dff_d;
            D_correct_button_compare_dff_q <= D_correct_button_compare_dff_d;
            D_counter_dff_q <= D_counter_dff_d;
            D_temp_dff_q <= D_temp_dff_d;
            D_wa_dff_q <= D_wa_dff_d;
            D_we_dff_q <= D_we_dff_d;
            D_data_dff_q <= D_data_dff_d;
        end
    end
endmodule