/*
    This file was generated automatically by Alchitry Labs 2.0.24-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module game_regfiles (
        input wire clk,
        input wire rst,
        input wire [3:0] wa,
        input wire we,
        input wire [31:0] data,
        input wire [3:0] ra1,
        input wire [3:0] ra2,
        output reg [31:0] rd1,
        output reg [31:0] rd2,
        output reg [31:0] correct_button_out,
        output reg [31:0] motor_direction_out,
        output reg [31:0] motor_speed_out,
        output reg [31:0] p0_score_out,
        output reg [31:0] p1_score_out,
        output reg [31:0] correct_button_compare_out,
        output reg [31:0] counter_out,
        output reg [31:0] temp_out,
        output reg [3:0] wa_out,
        output reg we_out,
        output reg [31:0] data_out
    );
    logic [31:0] D_correct_button_reg_d, D_correct_button_reg_q = 1'h0;
    logic [31:0] D_motor_direction_reg_d, D_motor_direction_reg_q = 1'h0;
    logic [31:0] D_motor_speed_reg_d, D_motor_speed_reg_q = 1'h0;
    logic [31:0] D_p0_score_reg_d, D_p0_score_reg_q = 1'h0;
    logic [31:0] D_p1_score_reg_d, D_p1_score_reg_q = 1'h0;
    logic [31:0] D_correct_button_compare_reg_d, D_correct_button_compare_reg_q = 1'h0;
    logic [31:0] D_counter_reg_d, D_counter_reg_q = 1'h0;
    logic [31:0] D_temp_reg_d, D_temp_reg_q = 1'h0;
    logic [3:0] D_wa_reg_d, D_wa_reg_q = 1'h0;
    logic D_we_reg_d, D_we_reg_q = 1'h0;
    logic [31:0] D_data_reg_d, D_data_reg_q = 6'h20;
    always @* begin
        D_wa_reg_d = D_wa_reg_q;
        D_we_reg_d = D_we_reg_q;
        D_data_reg_d = D_data_reg_q;
        D_correct_button_reg_d = D_correct_button_reg_q;
        D_motor_direction_reg_d = D_motor_direction_reg_q;
        D_motor_speed_reg_d = D_motor_speed_reg_q;
        D_p0_score_reg_d = D_p0_score_reg_q;
        D_p1_score_reg_d = D_p1_score_reg_q;
        D_correct_button_compare_reg_d = D_correct_button_compare_reg_q;
        D_counter_reg_d = D_counter_reg_q;
        D_temp_reg_d = D_temp_reg_q;
        
        D_wa_reg_d = wa;
        D_we_reg_d = we;
        D_data_reg_d = data;
        if (we) begin
            
            case (wa)
                1'h0: begin
                    D_correct_button_reg_d = 32'hffff;
                end
                1'h1: begin
                    D_motor_direction_reg_d = 32'hffff;
                end
                2'h2: begin
                    D_motor_speed_reg_d = data;
                end
                2'h3: begin
                    D_p0_score_reg_d = data;
                end
                3'h4: begin
                    D_p1_score_reg_d = data;
                end
                3'h5: begin
                    D_correct_button_compare_reg_d = data;
                end
                3'h6: begin
                    D_counter_reg_d = data;
                end
                3'h7: begin
                    D_temp_reg_d = data;
                end
            endcase
        end
        
        case (ra1)
            1'h0: begin
                rd1 = D_correct_button_reg_q;
            end
            1'h1: begin
                rd1 = D_motor_direction_reg_q;
            end
            2'h2: begin
                rd1 = D_motor_speed_reg_q;
            end
            2'h3: begin
                rd1 = D_p0_score_reg_q;
            end
            3'h4: begin
                rd1 = D_p1_score_reg_q;
            end
            3'h5: begin
                rd1 = D_correct_button_compare_reg_q;
            end
            3'h6: begin
                rd1 = D_counter_reg_q;
            end
            3'h7: begin
                rd1 = D_temp_reg_q;
            end
            default: begin
                rd1 = 1'h0;
            end
        endcase
        
        case (ra2)
            1'h0: begin
                rd2 = D_correct_button_reg_q;
            end
            1'h1: begin
                rd2 = D_motor_direction_reg_q;
            end
            2'h2: begin
                rd2 = D_motor_speed_reg_q;
            end
            2'h3: begin
                rd2 = D_p0_score_reg_q;
            end
            3'h4: begin
                rd2 = D_p1_score_reg_q;
            end
            3'h5: begin
                rd2 = D_correct_button_compare_reg_q;
            end
            3'h6: begin
                rd2 = D_counter_reg_q;
            end
            3'h7: begin
                rd2 = D_temp_reg_q;
            end
            default: begin
                rd2 = 1'h0;
            end
        endcase
        correct_button_out = D_correct_button_reg_q;
        motor_direction_out = D_motor_direction_reg_q;
        motor_speed_out = D_motor_speed_reg_q;
        p0_score_out = D_p0_score_reg_q;
        p1_score_out = D_p1_score_reg_q;
        correct_button_compare_out = D_correct_button_compare_reg_q;
        counter_out = D_counter_reg_q;
        temp_out = D_temp_reg_q;
        wa_out = D_wa_reg_q;
        we_out = D_we_reg_q;
        data_out = D_data_reg_q;
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_correct_button_reg_q <= 1'h0;
            D_motor_direction_reg_q <= 1'h0;
            D_motor_speed_reg_q <= 1'h0;
            D_p0_score_reg_q <= 1'h0;
            D_p1_score_reg_q <= 1'h0;
            D_correct_button_compare_reg_q <= 1'h0;
            D_counter_reg_q <= 1'h0;
            D_temp_reg_q <= 1'h0;
            D_wa_reg_q <= 1'h0;
            D_we_reg_q <= 1'h0;
            D_data_reg_q <= 6'h20;
        end else begin
            D_correct_button_reg_q <= D_correct_button_reg_d;
            D_motor_direction_reg_q <= D_motor_direction_reg_d;
            D_motor_speed_reg_q <= D_motor_speed_reg_d;
            D_p0_score_reg_q <= D_p0_score_reg_d;
            D_p1_score_reg_q <= D_p1_score_reg_d;
            D_correct_button_compare_reg_q <= D_correct_button_compare_reg_d;
            D_counter_reg_q <= D_counter_reg_d;
            D_temp_reg_q <= D_temp_reg_d;
            D_wa_reg_q <= D_wa_reg_d;
            D_we_reg_q <= D_we_reg_d;
            D_data_reg_q <= D_data_reg_d;
        end
    end
endmodule