/*
    This file was generated automatically by Alchitry Labs 2.0.24-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alchitry_top (
        input wire clk,
        input wire rst_n,
        output reg [7:0] led,
        input wire usb_rx,
        output reg usb_tx,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        input wire [2:0] p0_button,
        input wire [2:0] p1_button,
        output reg motorIN1,
        output reg motorIN2,
        output reg p0l0,
        output reg p0l1,
        output reg p1l0,
        output reg p1l1
    );
    logic rst;
    localparam CLK_FREQ = 24'h989680;
    localparam _MP_STAGES_323290305 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_323290305)
    ) reset_cond (
        .clk(clk),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    localparam logic [2:0][0:0] _MP_RISE_1585653527 = {{1'h1, 1'h1, 1'h1}};
    localparam logic [2:0][0:0] _MP_FALL_1585653527 = {{1'h0, 1'h0, 1'h0}};
    logic [2:0] M_p0_button_edge_in;
    logic [2:0] M_p0_button_edge_out;
    
    genvar idx_0_1585653527;
    
    generate
        for (idx_0_1585653527 = 0; idx_0_1585653527 < 3; idx_0_1585653527 = idx_0_1585653527 + 1) begin: forLoop_idx_0_1585653527
            edge_detector #(
                .RISE(_MP_RISE_1585653527[idx_0_1585653527]),
                .FALL(_MP_FALL_1585653527[idx_0_1585653527])
            ) p0_button_edge (
                .clk(clk),
                .in(M_p0_button_edge_in[idx_0_1585653527]),
                .out(M_p0_button_edge_out[idx_0_1585653527])
            );
        end
    endgenerate
    
    
    localparam logic [2:0][0:0] _MP_RISE_1287597952 = {{1'h1, 1'h1, 1'h1}};
    localparam logic [2:0][0:0] _MP_FALL_1287597952 = {{1'h0, 1'h0, 1'h0}};
    logic [2:0] M_p1_button_edge_in;
    logic [2:0] M_p1_button_edge_out;
    
    genvar idx_0_1287597952;
    
    generate
        for (idx_0_1287597952 = 0; idx_0_1287597952 < 3; idx_0_1287597952 = idx_0_1287597952 + 1) begin: forLoop_idx_0_1287597952
            edge_detector #(
                .RISE(_MP_RISE_1287597952[idx_0_1287597952]),
                .FALL(_MP_FALL_1287597952[idx_0_1287597952])
            ) p1_button_edge (
                .clk(clk),
                .in(M_p1_button_edge_in[idx_0_1287597952]),
                .out(M_p1_button_edge_out[idx_0_1287597952])
            );
        end
    endgenerate
    
    
    localparam logic [2:0][23:0] _MP_CLK_FREQ_212513179 = {{24'h989680, 24'h989680, 24'h989680}};
    localparam _MP_MIN_DELAY_212513179 = 5'h14;
    localparam _MP_NUM_SYNC_212513179 = 2'h2;
    logic [2:0] M_p0_button_cond_in;
    logic [2:0] M_p0_button_cond_out;
    
    genvar idx_0_212513179;
    
    generate
        for (idx_0_212513179 = 0; idx_0_212513179 < 3; idx_0_212513179 = idx_0_212513179 + 1) begin: forLoop_idx_0_212513179
            button_conditioner #(
                .CLK_FREQ(_MP_CLK_FREQ_212513179[idx_0_212513179]),
                .MIN_DELAY(_MP_MIN_DELAY_212513179),
                .NUM_SYNC(_MP_NUM_SYNC_212513179)
            ) p0_button_cond (
                .clk(clk),
                .in(M_p0_button_cond_in[idx_0_212513179]),
                .out(M_p0_button_cond_out[idx_0_212513179])
            );
        end
    endgenerate
    
    
    localparam logic [2:0][23:0] _MP_CLK_FREQ_1342090838 = {{24'h989680, 24'h989680, 24'h989680}};
    localparam _MP_MIN_DELAY_1342090838 = 5'h14;
    localparam _MP_NUM_SYNC_1342090838 = 2'h2;
    logic [2:0] M_p1_button_cond_in;
    logic [2:0] M_p1_button_cond_out;
    
    genvar idx_0_1342090838;
    
    generate
        for (idx_0_1342090838 = 0; idx_0_1342090838 < 3; idx_0_1342090838 = idx_0_1342090838 + 1) begin: forLoop_idx_0_1342090838
            button_conditioner #(
                .CLK_FREQ(_MP_CLK_FREQ_1342090838[idx_0_1342090838]),
                .MIN_DELAY(_MP_MIN_DELAY_1342090838),
                .NUM_SYNC(_MP_NUM_SYNC_1342090838)
            ) p1_button_cond (
                .clk(clk),
                .in(M_p1_button_cond_in[idx_0_1342090838]),
                .out(M_p1_button_cond_out[idx_0_1342090838])
            );
        end
    endgenerate
    
    
    logic M_game_datapath_p0b0;
    logic M_game_datapath_p0b1;
    logic M_game_datapath_p1b0;
    logic M_game_datapath_p1b1;
    logic M_game_datapath_p0wall;
    logic M_game_datapath_p1wall;
    logic [31:0] M_game_datapath_correct_button;
    logic [31:0] M_game_datapath_motor_direction;
    logic [31:0] M_game_datapath_motor_speed;
    logic [31:0] M_game_datapath_p0_score;
    logic [31:0] M_game_datapath_p1_score;
    logic [31:0] M_game_datapath_correct_button_compare;
    logic [31:0] M_game_datapath_counter;
    logic [31:0] M_game_datapath_temp;
    logic [31:0] M_game_datapath_temp1;
    logic [3:0] M_game_datapath_wa;
    logic M_game_datapath_we;
    logic [31:0] M_game_datapath_data;
    logic [31:0] M_game_datapath_a;
    logic [31:0] M_game_datapath_b;
    logic [5:0] M_game_datapath_alufn;
    
    game_datapath game_datapath (
        .clk(clk),
        .rst(rst),
        .p0b0(M_game_datapath_p0b0),
        .p0b1(M_game_datapath_p0b1),
        .p1b0(M_game_datapath_p1b0),
        .p1b1(M_game_datapath_p1b1),
        .p0wall(M_game_datapath_p0wall),
        .p1wall(M_game_datapath_p1wall),
        .correct_button(M_game_datapath_correct_button),
        .motor_direction(M_game_datapath_motor_direction),
        .motor_speed(M_game_datapath_motor_speed),
        .p0_score(M_game_datapath_p0_score),
        .p1_score(M_game_datapath_p1_score),
        .correct_button_compare(M_game_datapath_correct_button_compare),
        .counter(M_game_datapath_counter),
        .temp(M_game_datapath_temp),
        .temp1(M_game_datapath_temp1),
        .wa(M_game_datapath_wa),
        .we(M_game_datapath_we),
        .data(M_game_datapath_data),
        .a(M_game_datapath_a),
        .b(M_game_datapath_b),
        .alufn(M_game_datapath_alufn)
    );
    
    
    logic M_motor_in1;
    logic M_motor_in2;
    
    motor motor (
        .motor_speed(M_game_datapath_motor_speed),
        .motor_direction(M_game_datapath_motor_direction),
        .clk(clk),
        .rst(rst),
        .in1(M_motor_in1),
        .in2(M_motor_in2)
    );
    
    
    localparam _MP_CLK_FREQ_619806598 = 24'h989680;
    localparam _MP_BAUD_619806598 = 17'h186a0;
    logic M_rx_rx;
    logic [7:0] M_rx_data;
    logic M_rx_new_data;
    
    uart_rx #(
        .CLK_FREQ(_MP_CLK_FREQ_619806598),
        .BAUD(_MP_BAUD_619806598)
    ) rx (
        .clk(clk),
        .rst(rst),
        .rx(M_rx_rx),
        .data(M_rx_data),
        .new_data(M_rx_new_data)
    );
    
    
    localparam _MP_CLK_FREQ_1573939770 = 24'h989680;
    localparam _MP_BAUD_1573939770 = 17'h186a0;
    logic M_tx_tx;
    logic M_tx_block;
    logic M_tx_busy;
    logic [7:0] M_tx_data;
    logic M_tx_new_data;
    
    uart_tx #(
        .CLK_FREQ(_MP_CLK_FREQ_1573939770),
        .BAUD(_MP_BAUD_1573939770)
    ) tx (
        .clk(clk),
        .rst(rst),
        .tx(M_tx_tx),
        .block(M_tx_block),
        .busy(M_tx_busy),
        .data(M_tx_data),
        .new_data(M_tx_new_data)
    );
    
    
    logic M_debugger_new_rx;
    logic [7:0] M_debugger_rx_data;
    logic M_debugger_new_tx;
    logic [7:0] M_debugger_tx_data;
    logic M_debugger_tx_busy;
    logic [31:0] M_debugger_correct_button;
    logic [31:0] M_debugger_motor_direction;
    logic [31:0] M_debugger_motor_speed;
    logic [31:0] M_debugger_p0_score;
    logic [31:0] M_debugger_p1_score;
    logic [31:0] M_debugger_correct_button_compare;
    logic [31:0] M_debugger_counter;
    logic [31:0] M_debugger_temp;
    logic [31:0] M_debugger_temp1;
    logic [3:0] M_debugger_wa;
    logic M_debugger_we;
    logic [31:0] M_debugger_data;
    logic [31:0] M_debugger_a;
    logic [31:0] M_debugger_b;
    logic [5:0] M_debugger_alufn;
    
    debugger debugger (
        .clk(clk),
        .rst(rst),
        .new_rx(M_debugger_new_rx),
        .rx_data(M_debugger_rx_data),
        .new_tx(M_debugger_new_tx),
        .tx_data(M_debugger_tx_data),
        .tx_busy(M_debugger_tx_busy),
        .correct_button(M_debugger_correct_button),
        .motor_direction(M_debugger_motor_direction),
        .motor_speed(M_debugger_motor_speed),
        .p0_score(M_debugger_p0_score),
        .p1_score(M_debugger_p1_score),
        .correct_button_compare(M_debugger_correct_button_compare),
        .counter(M_debugger_counter),
        .temp(M_debugger_temp),
        .temp1(M_debugger_temp1),
        .wa(M_debugger_wa),
        .we(M_debugger_we),
        .data(M_debugger_data),
        .a(M_debugger_a),
        .b(M_debugger_b),
        .alufn(M_debugger_alufn)
    );
    
    
    always @* begin
        M_reset_cond_in = ~rst_n;
        rst = M_reset_cond_out;
        led = 8'h0;
        io_segment = 8'h0;
        io_select = 4'h0;
        usb_tx = usb_rx;
        p0l0 = 1'h1;
        p0l1 = 1'h1;
        p1l0 = 1'h1;
        p1l1 = 1'h1;
        M_rx_rx = usb_rx;
        usb_tx = M_tx_tx;
        M_debugger_new_rx = M_rx_new_data;
        M_debugger_rx_data = M_rx_data;
        M_debugger_correct_button = M_game_datapath_correct_button;
        M_debugger_motor_direction = M_game_datapath_motor_direction;
        M_debugger_motor_speed = M_game_datapath_motor_speed;
        M_debugger_p0_score = M_game_datapath_p0_score;
        M_debugger_p1_score = M_game_datapath_p1_score;
        M_debugger_correct_button_compare = M_game_datapath_correct_button_compare;
        M_debugger_counter = M_game_datapath_counter;
        M_debugger_temp = M_game_datapath_temp;
        M_debugger_temp1 = M_game_datapath_temp1;
        M_debugger_wa = M_game_datapath_wa;
        M_debugger_we = M_game_datapath_we;
        M_debugger_data = M_game_datapath_data;
        M_debugger_a = M_game_datapath_a;
        M_debugger_b = M_game_datapath_b;
        M_debugger_alufn = M_game_datapath_alufn;
        M_tx_new_data = M_debugger_new_tx;
        M_tx_data = M_debugger_tx_data;
        M_debugger_tx_busy = M_tx_busy;
        M_tx_block = 1'h0;
        M_p0_button_cond_in = p0_button;
        M_p1_button_cond_in = p1_button;
        M_p0_button_edge_in = M_p0_button_cond_out;
        M_p1_button_edge_in = M_p1_button_cond_out;
        M_game_datapath_p0b0 = M_p0_button_edge_out[1'h0];
        M_game_datapath_p0b1 = M_p0_button_edge_out[1'h1];
        M_game_datapath_p0wall = M_p0_button_edge_out[2'h2];
        M_game_datapath_p1b0 = M_p1_button_edge_out[1'h0];
        M_game_datapath_p1b1 = M_p1_button_edge_out[1'h1];
        M_game_datapath_p1wall = M_p1_button_edge_out[2'h2];
        motorIN1 = M_motor_in1;
        motorIN2 = M_motor_in2;
        p0l0 = M_game_datapath_correct_button_compare[5'h1c];
        p0l1 = M_game_datapath_correct_button_compare[5'h1d];
        p1l0 = M_game_datapath_correct_button_compare[5'h1e];
        p1l1 = M_game_datapath_correct_button_compare[5'h1f];
    end
    
    
endmodule