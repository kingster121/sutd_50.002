/*
    This file was generated automatically by Alchitry Labs 2.0.24-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module servo #(
        parameter CLOCK_FREQ = 27'h5f5e100,
        parameter MIN_MAX_DIFF = 9'h1f4,
        parameter CENTER_WIDTH = 11'h5dc,
        parameter PERIOD = 15'h4e20,
        parameter RESOLUTION = 4'h8
    ) (
        input wire clk,
        input wire rst,
        input wire [(RESOLUTION)-1:0] position,
        output reg servo
    );
    localparam TOP = (CLOCK_FREQ / 20'hf4240) * PERIOD;
    localparam MIN_MAX = (CLOCK_FREQ / 20'hf4240) * MIN_MAX_DIFF;
    localparam SHIFT = $clog2(MIN_MAX * 2'h2) - RESOLUTION;
    localparam OFFSET = (CLOCK_FREQ / 20'hf4240) * CENTER_WIDTH - (64'(2'h2) ** (RESOLUTION + SHIFT - 1'h1));
    logic [(RESOLUTION)-1:0] D_pos_d, D_pos_q = 0;
    logic [($clog2(TOP))-1:0] D_ctr_d, D_ctr_q = 0;
    always @* begin
        D_ctr_d = D_ctr_q;
        D_pos_d = D_pos_q;
        
        D_ctr_d = D_ctr_q + 1'h1;
        if (D_ctr_q == TOP - 1'h1) begin
            if (position > (64'(2'h2) ** (RESOLUTION - 1'h1)) + MIN_MAX) begin
                D_pos_d = (64'(2'h2) ** (RESOLUTION - 1'h1)) + MIN_MAX;
            end else begin
                if (position < (64'(2'h2) ** (RESOLUTION - 1'h1)) - MIN_MAX) begin
                    D_pos_d = (64'(2'h2) ** (RESOLUTION - 1'h1)) - MIN_MAX;
                end else begin
                    D_pos_d = position;
                end
            end
            D_ctr_d = 1'h0;
        end
        servo = (D_pos_q << SHIFT) + OFFSET > D_ctr_q;
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_pos_q <= 0;
            D_ctr_q <= 0;
        end else begin
            D_pos_q <= D_pos_d;
            D_ctr_q <= D_ctr_d;
        end
    end
endmodule