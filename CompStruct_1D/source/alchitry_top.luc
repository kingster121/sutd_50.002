module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_segment[8],   // 7-segment LEDs on IO Shield
    output io_select[4],    // Digit select on IO Shield
    // input io_button[5],     // 5 buttons on IO Shield
    // input io_dip[3][8],      // DIP switches on IO Shield
    
    // Player button inputs
    // 0 - Button 0
    // 1 - Button 1
    // 2 - Wall
    input p0_button[3],
    input p1_button[3],
    
    // Motor IN1 and IN2
    output motorIN1,
    output motorIN2,
    
    // Player LEDs
    output p0l0,
    output p0l1,
    output p1l0,
    output p1l1
) {
    sig rst                 // reset signal
    // const CLOCK_DIVIDER = $is_sim() ? 11 : 17
    const CLK_FREQ = $is_sim() ? 1000 : 10_000_000 // Changed to 100MHz to meet timing constraint
    // const SEG_REFRESH = $is_sim() ? 2 : 10
    
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond
        
        // P0 and P1 button conditioner and edge detector
        // B0, B1, wall
        edge_detector p0_button_edge[3](#RISE(3x{{1}}), #FALL(3x{{0}}))
        edge_detector p1_button_edge[3](#RISE(3x{{1}}), #FALL(3x{{0}}))
        button_conditioner p0_button_cond[3](#CLK_FREQ(3x{{CLK_FREQ}})) 
        button_conditioner p1_button_cond[3](#CLK_FREQ(3x{{CLK_FREQ}})) 
        
        // edge_detector seg_clk_edge(#RISE(1), #FALL(0), .in(seg_clk.value))
        
        .rst(rst){
            // dff seg_multiplex[2](#INIT(0))
            // counter slow_clk(#SIZE(1), #DIV(CLOCK_DIVIDER)) 
            // counter seg_clk(#SIZE(1), #DIV(SEG_REFRESH))
            
            // Directly connect motor speed and direction to them dff upon instantiation
            // dff motor_speed[3](#INIT(0))
            // dff motor_direction(#INIT(0))
            // motor motor(.motor_speed(motor_speed.q), .motor_direction(motor_direction.q))
            
            game_datapath game_datapath
            
            // Directly connect motor to the datapath
            motor motor(.motor_speed(game_datapath.motor_speed), .motor_direction(game_datapath.motor_direction))
            
            // rx and tx for serial debugging
            #BAUD(100_000), #CLK_FREQ(CLK_FREQ) {
                uart_rx rx
                uart_tx tx
            }
            // Debugger module
            debugger debugger
        }
        
        // RNG modules 
        // random_number_generator rng_1(#SIZE(1), .slow_clk(slow_clk.value), .refresh(rst))
        // random_number_generator rng_2000(#SIZE(11), .slow_clk(slow_clk.value), .refresh(rst))
    }
    
    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
        
        // Default outputs
        led = 8h00              // turn LEDs off
        io_segment = 8h00
        io_select = 4h0
        usb_tx = usb_rx         // loop serial port
        p0l0 = 1
        p0l1 = 1
        p1l0 = 1
        p1l1 = 1
        
        // Connecting dffs
        // seg_multiplex.d = seg_multiplex.q
        
        // =================== DEBUGGING ===================== //
        rx.rx = usb_rx          // connect rx input
        usb_tx = tx.tx          // connect tx output
        
        debugger.new_rx = rx.new_data
        debugger.rx_data = rx.data
        // debugger.correct_button = 32b00000000000000000000000000000000
        // debugger.motor_direction = 32b00000000000000000000000000000001
        // debugger.motor_speed = 32b00000000000000000000000000000011
        // debugger.p0_score = 32b00000000000000000000000000000111
        // debugger.p1_score = 32b00000000000000000000000000001111
        // debugger.correct_button_compare = 32b00000000000000000000000000011111
        // debugger.counter = 32b00000000000000000000000000111111
        // debugger.temp = 32b00000000000000000000000001111111
        debugger.correct_button = game_datapath.correct_button
        debugger.motor_direction = game_datapath.motor_direction
        debugger.motor_speed = game_datapath.motor_speed
        debugger.p0_score = game_datapath.p0_score
        debugger.p1_score = game_datapath.p1_score
        debugger.correct_button_compare = game_datapath.correct_button_compare
        debugger.counter = game_datapath.counter
        debugger.temp = game_datapath.temp
        debugger.temp1 = game_datapath.temp1
        
        // Debugging inputs to regfile
        debugger.wa =game_datapath.wa
        debugger.we = game_datapath.we
        debugger.data = game_datapath.data
        debugger.a = game_datapath.a
        debugger.b = game_datapath.b
        debugger.alufn = game_datapath.alufn
        
        tx.new_data = debugger.new_tx
        tx.data = debugger.tx_data
        debugger.tx_busy = tx.busy
        
        tx.block = 0            // no flow control, do not block
        
        // ================== NEW CODE =================== //
        // Connect player 0 and player 1 button conditioner to edge detector
        p0_button_cond.in = p0_button
        p1_button_cond.in = p1_button
        p0_button_edge.in = p0_button_cond.out
        p1_button_edge.in = p1_button_cond.out
        
        // Connect the game_datapath
        // game_datapath.rng_1 = rng_1.out
        // game_datapath.rng_2000 = rng_2000.out
        
        game_datapath.p0b0 = p0_button_edge.out[0]
        game_datapath.p0b1 = p0_button_edge.out[1]
        game_datapath.p0wall = p0_button_edge.out[2]
        game_datapath.p1b0 = p1_button_edge.out[0]
        game_datapath.p1b1 = p1_button_edge.out[1]
        game_datapath.p1wall = p1_button_edge.out[2]
        
        // Connect motor
        motorIN1 = motor.in1
        motorIN2 = motor.in2
        
        // ================= PAST CODE ==================== //
        // Test motor on io_led
        // ##### CHANGE THIS CONNECTION TO THE motor driver! #####
        // motorIN1 = motor.in1
        // motorIN2 = motor.in2
        
        // Player Buttons - Motor Actuation
        // if (io_button_edge.out[0]) {
        //     motor_speed.d = motor_speed.q + 1
        //     motor_direction.d = 0
        // }
        // if (io_button_edge.out[2]) {
        //     motor_speed.d = motor_speed.q + 1
        //     motor_direction.d = 1
        // }
        
        // if (p0_button_edge.out[0]) {
        //     motor_speed.d = motor_speed.q + 1
        //     motor_direction.d = 0
        // }
        // if (p1_button_edge.out[0]) {
        //     motor_speed.d = motor_speed.q + 1
        //     motor_direction.d = 1
        // }
        
        // Button Lights
        
        
        
        // Invert motor direction when CENTER button is pressed
        // if (io_button_edge.out[1])
        //    motor_direction.d = ~motor_direction.q
        
        // Increase motor speed 
        // if (io_button_edge.out[0])
        // {
        //    if (motor_speed.q == 7)
        //        motor_speed.d = motor_speed.q
        //    else
        //        motor_speed.d = motor_speed.q + 1
        // }
        
        // Decrease motor speed
        // if (io_button_edge.out[2])
        // {
        //    if (motor_speed.q == 0)
        //        motor_speed.d = motor_speed.q
        //    else
        //        motor_speed.d = motor_speed.q - 1
        // }
    }
}