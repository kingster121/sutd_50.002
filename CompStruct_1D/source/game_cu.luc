module game_cu (
    input clk,  // clock
    input rst,  // reset
    input slow_clk, // Shouldnt need this, since counter will be counted internally to the 100MHz clock
    input regfile_rd2[32],
    
    // Button inputs
    input p0b0,
    input p0b1,
    input p1b0,
    input p1b1,
    input p0wall,
    input p1wall,
    
    output alufn[6],
    output asel[3],
    output bsel[3],
    output alu_out_sel[2],
    output regfile_wa[4],
    output regfile_ra1[4],
    output regfile_ra2[4],
    output regfile_we
    // output debug[4]
) {
    
    enum GameStates {
        IDLE,
        
        // Motor states
        P0B0_UPDATE_MOTOR,
        P0B1_UPDATE_MOTOR,
        P1B0_UPDATE_MOTOR,
        P1B1_UPDATE_MOTOR,
        INCREASE_MOTOR_SPEED,
        
        // Score states
        P0_INCREASE_SCORE,
        P0_CHECK_SCORE, 
        P0_WALL_BRANCH,
        P0_WIN,
        P0_HAVENT_WIN,
        P1_INCREASE_SCORE,
        P1_CHECK_SCORE, 
        P1_WALL_BRANCH,
        P1_WIN,
        P1_HAVENT_WIN,
        GAMEOVER,
        
        // START/RESET
        START,
        RESET_COUNTER,
        SET_MAX_COUNTER,
        INCREASE_COUNTER,
        WAIT_FOR_EDGE_LOW,
        CHECK_COUNTER,
        BRANCH_COUNTER,
        
        // Set correct buttons
        SET_CORRECT_BUTTON,
        // CHECK_CORRECT_BUTTON,
        BRANCH_CORRECT_BUTTON, // Direct read from correct button reg
        SET_0_CORRECT_BUTTON,
        SET_1_CORRECT_BUTTON
    }
    
    // CHANGE THIS TO START
    dff game_fsm[$width(GameStates)](#INIT(GameStates.IDLE), .clk(clk), .rst(rst))
    
    always {
        alufn = 0
        asel = 0
        bsel = 0
        alu_out_sel = 0
        regfile_we = 0
        regfile_wa = 0
        regfile_ra1 = 0
        regfile_ra2 = 0
        
        // debug = b0000
        
        if (rst) {
            game_fsm.d = GameStates.IDLE
        }
        
        else {
            case (game_fsm.q) {
                GameStates.IDLE:
                    alufn = 0
                    asel = 0
                    bsel = 0
                    regfile_we = 0
                    regfile_wa = 0
                    regfile_ra1 = 0
                    regfile_ra2 = 0
                    alu_out_sel = 0
                    
                    // User button presses
                    if (p0b0)
                        game_fsm.d = GameStates.START
                    if (p0b1)
                        game_fsm.d = GameStates.P0B1_UPDATE_MOTOR
                    if (p1b0)
                        game_fsm.d = GameStates.P1B0_UPDATE_MOTOR
                    if (p1b1)
                        game_fsm.d = GameStates.P1B1_UPDATE_MOTOR
                    
                    // Game wall presses
                    if (p0wall)
                        game_fsm.d = GameStates.P0_INCREASE_SCORE
                    if (p1wall)
                        game_fsm.d = GameStates.P1_INCREASE_SCORE
                
                GameStates.P0B0_UPDATE_MOTOR:
                    alufn = 6h38 
                    asel = d4
                    bsel = d0
                    regfile_we = 1
                    regfile_wa = d1 // motor direction
                    regfile_ra1 = d0
                    regfile_ra2 = d5
                    alu_out_sel = d0
                    game_fsm.d = GameStates.INCREASE_MOTOR_SPEED
                
                GameStates.P0B1_UPDATE_MOTOR:
                    alufn = 6h38 
                    asel = d3
                    bsel = d0
                    regfile_we = 1
                    regfile_wa = d1 // motor direction
                    regfile_ra1 = d0
                    regfile_ra2 = d5
                    alu_out_sel = d0
                    game_fsm.d = GameStates.INCREASE_MOTOR_SPEED
                
                GameStates.P1B0_UPDATE_MOTOR:
                    alufn = 6h39 
                    asel = d2
                    bsel = d0
                    regfile_we = 1
                    regfile_wa = d1 // motor direction
                    regfile_ra1 = d0
                    regfile_ra2 = d5
                    alu_out_sel = d0
                    game_fsm.d = GameStates.INCREASE_MOTOR_SPEED
                
                GameStates.P1B1_UPDATE_MOTOR:
                    alufn = 6h39 
                    asel = d1
                    bsel = d0
                    regfile_we = 1
                    regfile_wa = d1 // motor direction
                    regfile_ra1 = d0
                    regfile_ra2 = d5
                    alu_out_sel = d0
                    game_fsm.d = GameStates.INCREASE_MOTOR_SPEED           
                
                // Maybe should have a condition to check if MAX speed has been reached
                GameStates.INCREASE_MOTOR_SPEED:
                    alufn = 6h00
                    asel = d1
                    bsel = d0
                    regfile_we = 1
                    regfile_wa = d2 // motor speed
                    regfile_ra1 = d0
                    regfile_ra2 = d2
                    alu_out_sel = d0
                    game_fsm.d = GameStates.IDLE
                
                GameStates.START:
                    alufn = 6h00
                    asel = d0
                    bsel = d0
                    regfile_we = 0
                    regfile_wa = d0
                    regfile_ra1 = d0
                    regfile_ra2 = d0
                    alu_out_sel = d0
                    game_fsm.d = GameStates.RESET_COUNTER
                
                GameStates.RESET_COUNTER:
                    alufn = 6h1B // 'B'
                    asel = d0
                    bsel = d4
                    regfile_we = 1
                    regfile_wa = d6 // counter
                    regfile_ra1 = d6
                    regfile_ra2 = d0
                    alu_out_sel = d0
                    game_fsm.d = GameStates.SET_MAX_COUNTER
                
                GameStates.SET_MAX_COUNTER:
                    alufn = 6h3A
                    asel = d0
                    bsel = d0
                    regfile_we = 1
                    regfile_wa = d7 // temp counter used as max counter reg for now
                    regfile_ra1 = d0
                    regfile_ra2 = d0
                    alu_out_sel = d2
                    game_fsm.d = GameStates.INCREASE_COUNTER
                
                GameStates.INCREASE_COUNTER:
                    alufn = 6h00
                    asel = d1
                    bsel = d0
                    regfile_we = 1
                    regfile_wa = d6 // counter reg
                    regfile_ra1 = d0
                    regfile_ra2 = d6
                    alu_out_sel = d0
                    game_fsm.d = GameStates.WAIT_FOR_EDGE_LOW
                
                // Added not from the FSM diagram
                GameStates.WAIT_FOR_EDGE_LOW:
                    if (~slow_clk)
                        game_fsm.d = GameStates.CHECK_COUNTER
                    else
                        game_fsm.d = GameStates.WAIT_FOR_EDGE_LOW
                
                GameStates.CHECK_COUNTER:
                    alufn = 6h35
                    asel = d0
                    bsel = d0
                    regfile_we = 1
                    regfile_wa = d8 // temp1 reg 
                    regfile_ra1 = d6
                    regfile_ra2 = d7
                    alu_out_sel = d0
                    game_fsm.d = GameStates.BRANCH_COUNTER
                
                GameStates.BRANCH_COUNTER:
                    alufn = 6h00
                    asel = d0
                    bsel = d0
                    regfile_we = 0
                    regfile_wa = d0
                    regfile_ra1 = d0
                    regfile_ra2 = d8 // Allows for direct read 
                    alu_out_sel = d0
                    
                    if (~regfile_rd2[0])
                        game_fsm.d = GameStates.SET_CORRECT_BUTTON
                    else if (slow_clk)
                        game_fsm.d = GameStates.INCREASE_COUNTER
                    else
                        game_fsm.d = GameStates.BRANCH_COUNTER
                
                GameStates.SET_CORRECT_BUTTON:
                    alufn = 6h00
                    asel = d0
                    bsel = d0
                    regfile_we = 1
                    regfile_wa = d0 
                    regfile_ra1 = d0
                    regfile_ra2 = d0
                    alu_out_sel = d1 // rng_1
                    game_fsm.d = GameStates.BRANCH_CORRECT_BUTTON
                
                GameStates.BRANCH_CORRECT_BUTTON:
                    alufn = 6h00
                    asel = d0
                    bsel = d0
                    regfile_we = 0
                    regfile_wa = d0 
                    regfile_ra1 = d0
                    regfile_ra2 = d0 // Direct read correct_button reg
                    alu_out_sel = d0 // rng_1
                    if (~regfile_rd2[0])
                        game_fsm.d = GameStates.SET_0_CORRECT_BUTTON
                    else
                        game_fsm.d = GameStates.SET_1_CORRECT_BUTTON
                
                GameStates.SET_0_CORRECT_BUTTON:
                    alufn = 6h1B
                    asel = d0
                    bsel = d1
                    regfile_we = 1
                    regfile_wa = d5 // correct_button_compare
                    regfile_ra1 = d0
                    regfile_ra2 = d0
                    alu_out_sel = d0
                    game_fsm.d = GameStates.IDLE
                
                GameStates.SET_1_CORRECT_BUTTON:
                    alufn = 6h1B
                    asel = d0
                    bsel = d2
                    regfile_we = 1
                    regfile_wa = d5 // correct button compare
                    regfile_ra1 = d0
                    regfile_ra2 = d0
                    alu_out_sel = d0
                    game_fsm.d = GameStates.IDLE
                
                GameStates.P0_INCREASE_SCORE:
                    alufn = 6h00
                    asel = d1
                    bsel = d0
                    regfile_we = 1
                    regfile_wa = d3 // player 0 score reg
                    regfile_ra1 = d0
                    regfile_ra2 = d3
                    alu_out_sel = d0
                    game_fsm.d = GameStates.P0_CHECK_SCORE
            }
        }
    }
}