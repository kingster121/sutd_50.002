module game_regfiles (
    input clk,  // clock
    input rst,  // reset
    input wa[4], // write address
    input we, // write enable
    input data[32], // data in
    
    input ra1[4], // read address port 1
    input ra2[4], // read address port 2
    output rd1[32], // read data port 1
    output rd2[32], // read data port 2
    
    // Registers/DFFs
    output correct_button_out[32],
    output motor_direction_out[32],
    output motor_speed_out[32],
    output p0_score_out[32],
    output p1_score_out[32],
    output correct_button_compare_out[32],
    output counter_out[32],
    output temp_out[32],
    output temp1_out[32], 
    
    // Inputs to game_regfiles for debugging
    output wa_out[4],
    output we_out,
    output data_out[32]
    
) {
    .clk(clk){
        .rst(rst){
            dff correct_button_reg[32](#INIT(0))
            dff motor_direction_reg[32](#INIT(0))
            dff motor_speed_reg[32](#INIT(0))
            dff p0_score_reg[32](#INIT(0))
            dff p1_score_reg[32](#INIT(0))
            dff correct_button_compare_reg[32](#INIT(0))
            dff counter_reg[32](#INIT(0))
            dff temp_reg[32](#INIT(0))
            dff temp1_reg[32](#INIT(0))
            
            // For debugging regfile
            dff wa_reg[4](#INIT(0))
            dff we_reg(#INIT(0))
            dff data_reg[32](#INIT(32))
        }
    }
    
    always {
        
        // Debugging regfile
        wa_reg.d = wa
        we_reg.d = we
        data_reg.d = data
        
        // correct_button_compare_reg.d = 32b1010
        
        //write port
        if (we){
            case(wa){
                d0 : correct_button_reg.d = data
                d1 : motor_direction_reg.d = data
                d2 : motor_speed_reg.d = data
                d3 : p0_score_reg.d = data
                d4 : p1_score_reg.d = data
                d5 : correct_button_compare_reg.d = data
                d6 : counter_reg.d = data
                d7 : temp_reg.d = data
                d8 : temp1_reg.d = data
            }
        }
        
        
        //read port a
        case(ra1){
            d0 : rd1 = correct_button_reg.q
            d1 : rd1 = motor_direction_reg.q
            d2 : rd1 = motor_speed_reg.q
            d3 : rd1 = p0_score_reg.q
            d4 : rd1 = p1_score_reg.q
            d5 : rd1 = correct_button_compare_reg.q
            d6 : rd1 = counter_reg.q
            d7 : rd1 = temp_reg.q
            d8 : rd1 = temp1_reg.q
            default : rd1 = 0
        }
        
        //read port b
        case(ra2){
            d0 : rd2 = correct_button_reg.q
            d1 : rd2 = motor_direction_reg.q
            d2 : rd2 = motor_speed_reg.q
            d3 : rd2 = p0_score_reg.q
            d4 : rd2 = p1_score_reg.q
            d5 : rd2 = correct_button_compare_reg.q
            d6 : rd2 = counter_reg.q
            d7 : rd2 = temp_reg.q
            d8 : rd2 = temp1_reg.q
            default : rd2 = 0
        }
        
        // Registers to output
        correct_button_out = correct_button_reg.q
        motor_direction_out = motor_direction_reg.q
        motor_speed_out = motor_speed_reg.q
        p0_score_out = p0_score_reg.q
        p1_score_out = p1_score_reg.q
        correct_button_compare_out = correct_button_compare_reg.q
        counter_out = counter_reg.q
        temp_out = temp_reg.q
        temp1_out = temp1_reg.q
        
        // Debugging inputs
        wa_out = wa_reg.q
        we_out = we_reg.q
        data_out = data_reg.q
    }
}