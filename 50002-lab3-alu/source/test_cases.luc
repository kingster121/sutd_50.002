module test_cases (
    input test_address[8],
    output a[32],
    output b[32],
    output alufn_signal[6],
    output answer[32]
) {
    always {
        case (test_address){
            // ----------------ADDITION TEST CASE--------------- //
            // 0 + 0 = 0
            8h01:
                a = 32h00000000
                b = 32h00000000
                alufn_signal = 6b000000
                answer = 32h00000000
            
            // 0 + A = A
            8h02:
                a = 32h00000000
                b = 32h00003000
                alufn_signal = 6b000000
                answer = 32h00003000
            
            // A + 0 = A
            8h02:
                a = 32h00003000
                b = 32h00000000
                alufn_signal = 6b000000
                answer = 32h00003000
            
            // pos + pos = pos, no overflow
            // 16 + 32 = 48
            8h03:
                a = 32h00000010
                b = 32h00000020
                alufn_signal = 6b000000
                answer = 32h00000030
            
            // BELOW THIS POINT NEED CHANGE NUMBER
            // BELOW THIS POINT NEED CHANGE NUMBER
            // BELOW THIS POINT NEED CHANGE NUMBER
            
            // neg + pos = neg, no overflow
            // -250 + 20 = -230
            8h04:
                a = 32hFFFFFFF0
                b = 32h00000000
                alufn_signal = 6b000000
                answer = 32h00003000
            
            // pos + neg = neg, no overflow
            // 5 + -100 = -95
            8h04:
                a = 32h00003000
                b = 32h00000000
                alufn_signal = 6b000000
                answer = 32h00003000
            
            // neg + neg = neg, no overflow
            // -1 + -1 = -2
            8h04:
                a = 32h00003000
                b = 32h00000000
                alufn_signal = 6b000000
                answer = 32h00003000
            
            // pos + pos = neg, overflow
            // (2^31-1) + 1 = -2^31
            8h04:
                a = 32h00003000
                b = 32h00000000
                alufn_signal = 6b000000
                answer = 32h00003000
            
            // neg + neg = pos, overflow
            // (-2^31) + -1 = 2^31-1
            8h04:
                a = 32h00003000
                b = 32h00000000
                alufn_signal = 6b000000
                answer = 32h00003000
            
            // A + (-A) = 0, no overflow
            // 8 + -8 = 0
            8h04:
                a = 32h00003000
                b = 32h00000000
                alufn_signal = 6b000000
                answer = 32h00003000
            
            // ----------------SUBTRACTION TEST CASE--------------- //
            // 0 - 0 = 0, no overflow
            8h01:
                a = 32h00000000
                b = 32h00000000
                alufn_signal = 6b000001
                answer = 32h00000000
            
            // A - 0 = A, no overflow
            8h01:
                a = 32h00000000
                b = 32h00000000
                alufn_signal = 6b000001
                answer = 32h00000000
            
            // 0 - A = -A, overflow
            8h01:
                a = 32h00000000
                b = 32h00000000
                alufn_signal = 6b000001
                answer = 32h00000000
            
            // A - 0 = A
            8h01:
                a = 32h00000000
                b = 32h00000000
                alufn_signal = 6b000001
                answer = 32h00000000
            
            // pos - pos = pos, no overflow
            // 250 - 20 = 280
            8h04:
                a = 32h00003000
                b = 32h00000000
                alufn_signal = 6b000000
                answer = 32h00003000
            
            // pos - pos = neg, no overflow
            // 20 - 250 = -230
            8h04:
                a = 32h00003000
                b = 32h00000000
                alufn_signal = 6b000000
                answer = 32h00003000
            
            // pos - neg = pos, no overflow
            // 100 - -50 = -150
            8h04:
                a = 32h00000064
                b = 32hFFFFFFCE
                alufn_signal = 6b000000
                answer = 32h00000096
            
            // pos - neg = neg, overflow
            // 2^31-1 - 1 = -2^31
            8h04:
                a = 32h00003000
                b = 32h00000000
                alufn_signal = 6b000000
                answer = 32h00003000
            
            // neg - pos = neg, no overflow
            // -16 - 32 = -48
            8h04:
                a = 32h00003000
                b = 32h00000000
                alufn_signal = 6b000000
                answer = 32h00003000
            
            // neg - pos = pos, overflow
            // (-2^31) - 1 = 2^31-1
            8h04:
                a = 32h00003000
                b = 32h00000000
                alufn_signal = 6b000001
                answer = 32h00003000
            
            // neg - neg = neg, no overflow
            // -16 + -8 = -24
            8h04:
                a = 32h00003000
                b = 32h00000000
                alufn_signal = 6b000001
                answer = 32h00003000
            
            // neg - neg = pos, overflow
            // -1 - -2^31 = 2^31 - 1
            8h04:
                a = 32h00003000
                b = 32h00000000
                alufn_signal = 6b000001
                answer = 32h00003000
            
            // 0 - (2^31-1) = -2^31 + 1, no overflow
            8h04:
                a = 32h00003000
                b = 32h00000000
                alufn_signal = 6b000001
                answer = 32h00003000
            
            // ----------------MULTIPLICATION TEST CASE------------------- //
            // A * 0 = 0
            
            // 0 * A = 0
            
            // 1 * A = A
            
            // A * 1 = A
            
            // pos * pos = pos, no overflow
            // 100 * 100 = 10,000
            
            // pos * pos = pos, overflow
            // (2^30 + 1) * (2^30 + 1) = 2
            
            // neg * pos = neg, no overflow
            
            // pos * neg = neg, no overflo
            
            // neg * neg = pos, no overflow
            
            // ----------------------AND TEST CASES------------------------//
            // All ones and all zeros = 0
            
            // A and all ones = A
            
            // A and all zeros = 0
            
            // A and A = A
            
            // A and ~A = 0
            
            // -----------------------OR TEST CASES-----------------------//
            // A OR 0 = A
            
            // A or all ones = all ones
            
            // A or A = A
            
            // A or ~A = all ones
            
            // ---------------------XOR TEST CASES------------------------//
            // A XOR 0s = A
            
            // A XOR 1s = ~A
            
            // A XOR A = all zeros
            
            // A XOR ~A = all ones
            
            // ---------------------"A" TEST CASES-------------------------//
            // A = A
            
            // ---------------------SHL TEST CASE-------------------------//
            // A SHL(0) = A
            
            // A SHL(30) = lsb become msb
            
            // A SHL(5) = just check
            
            // --------------------SHR TEST CASES----------------------------//
            // A SHR(0) = A
            
            // A SHR(30) = msb become lsb
            
            // A SHR(5) = just check
            
            // --------------------SRA TEST CASES-----------------------------//
            // -A SRA(2) = preserves sign, essentially making it divide by 4
            
            // ----------------------CMPEQ TEST CASES-------------------------//
            // A =/= B = FALSE
            
            // A == B = TRUE
            
            // -----------------------CMPLT TEST CASES-----------------------//
            // A < B = TRUE
            
            // A == B = FALSE
            
            // A > B = FALSE
            
            // -----------------------CMPLE TEST CASES------------------------//
            // A < B = TRUE
            
            // A == B = TRUE
            
            // A > B = FALSE
            
            
            // Sets everything to 0
            default:
                a = 32h00000000
                b = 32h00000000
                alufn_signal = 6b000001
                answer = 32h00000000
        }
    }
}