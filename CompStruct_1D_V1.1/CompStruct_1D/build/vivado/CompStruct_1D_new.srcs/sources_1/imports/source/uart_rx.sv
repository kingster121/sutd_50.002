/*
    This file was generated automatically by Alchitry Labs 2.0.24-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module uart_rx #(
        parameter CLK_FREQ = 27'h5f5e100,
        parameter BAUD = 20'hf4240
    ) (
        input wire clk,
        input wire rst,
        input wire rx,
        output reg [7:0] data,
        output reg new_data
    );
    localparam CLK_PER_BIT = (CLK_FREQ + BAUD) / BAUD - 1'h1;
    localparam CTR_SIZE = $clog2(CLK_PER_BIT);
    localparam E_States_IDLE = 2'h0;
    localparam E_States_WAIT_HALF = 2'h1;
    localparam E_States_WAIT_FULL = 2'h2;
    localparam E_States_WAIT_HIGH = 2'h3;
    logic [1:0] D_state_d, D_state_q = 0;
    logic [(CTR_SIZE)-1:0] D_ctr_d, D_ctr_q = 0;
    logic [2:0] D_bit_ctr_d, D_bit_ctr_q = 0;
    logic [7:0] D_saved_data_d, D_saved_data_q = 0;
    logic D_new_data_buffer_d, D_new_data_buffer_q = 0;
    logic D_rxd_d, D_rxd_q = 0;
    always @* begin
        D_rxd_d = D_rxd_q;
        D_new_data_buffer_d = D_new_data_buffer_q;
        D_bit_ctr_d = D_bit_ctr_q;
        D_ctr_d = D_ctr_q;
        D_state_d = D_state_q;
        D_saved_data_d = D_saved_data_q;
        
        D_rxd_d = rx;
        D_new_data_buffer_d = 1'h0;
        data = D_saved_data_q;
        new_data = D_new_data_buffer_q;
        
        case (D_state_q)
            2'h0: begin
                D_bit_ctr_d = 1'h0;
                D_ctr_d = 1'h0;
                if (D_rxd_q == 1'h0) begin
                    D_state_d = 2'h1;
                end
            end
            2'h1: begin
                D_ctr_d = D_ctr_q + 1'h1;
                if (D_ctr_q == (CLK_PER_BIT >> 1'h1)) begin
                    D_ctr_d = 1'h0;
                    D_state_d = 2'h2;
                end
            end
            2'h2: begin
                D_ctr_d = D_ctr_q + 1'h1;
                if (D_ctr_q == CLK_PER_BIT - 1'h1) begin
                    D_saved_data_d = {D_rxd_q, D_saved_data_q[3'h7:1'h1]};
                    D_bit_ctr_d = D_bit_ctr_q + 1'h1;
                    D_ctr_d = 1'h0;
                    if (D_bit_ctr_q == 3'h7) begin
                        D_state_d = 2'h3;
                        D_new_data_buffer_d = 1'h1;
                    end
                end
            end
            2'h3: begin
                if (D_rxd_q == 1'h1) begin
                    D_state_d = 2'h0;
                end
            end
            default: begin
                D_state_d = 2'h0;
            end
        endcase
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_state_q <= 0;
        end else begin
            D_state_q <= D_state_d;
        end
    end
    always @(posedge (clk)) begin
        D_ctr_q <= D_ctr_d;
        D_bit_ctr_q <= D_bit_ctr_d;
        D_saved_data_q <= D_saved_data_d;
        D_new_data_buffer_q <= D_new_data_buffer_d;
        D_rxd_q <= D_rxd_d;
        
    end
endmodule