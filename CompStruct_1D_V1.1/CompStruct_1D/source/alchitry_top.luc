module alchitry_top (
    // Working V1.1
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_segment[8],   // 7-segment LEDs on IO Shield
    output io_select[4],    // Digit select on IO Shield
    
    // Player button inputs
    // 0 - Button 0
    // 1 - Button 1
    // 2 - Wall
    input p0_button[3],
    input p1_button[3],
    input center_button,
    
    // Motor IN1 and IN2
    output motorIN1,
    output motorIN2,
    
    // Player LEDs
    output p0l0,
    output p0l1,
    output p1l0,
    output p1l1,
    
    // Player score LEDs
    output p0_score[3],
    output p1_score[3]
) {
    sig rst                 // reset signal
    const CLK_FREQ = $is_sim() ? 1000 : 10_000_000 // Changed to 100MHz to meet timing constraint
    
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond
        
        // P0 and P1 button conditioner and edge detector
        // B0, B1, wall
        button_conditioner p0_button_cond[3](#CLK_FREQ(3x{{CLK_FREQ}})) 
        button_conditioner p1_button_cond[3](#CLK_FREQ(3x{{CLK_FREQ}})) 
        button_conditioner center_button_cond(#CLK_FREQ(CLK_FREQ)) 
        
        edge_detector p0_button_edge[3](#RISE(3x{{1}}), #FALL(3x{{0}}))
        edge_detector p1_button_edge[3](#RISE(3x{{1}}), #FALL(3x{{0}}))
        edge_detector center_button_edge(#RISE(1), #FALL(0))
        
        // edge_detector seg_clk_edge(#RISE(1), #FALL(0), .in(seg_clk.value))
        
        .rst(rst){
            game_datapath game_datapath
            
            // Directly connect motor to the datapath
            motor motor(.motor_speed(game_datapath.motor_speed), .motor_direction(game_datapath.motor_direction))
            
            // rx and tx for serial debugging
            #BAUD(100_000), #CLK_FREQ(CLK_FREQ) {
                uart_rx rx
                uart_tx tx
            }
            // Debugger module
            debugger debugger
        }
    }
    
    // LED score encoder module
    led_score_encoder p0_led_encoder
    led_score_encoder p1_led_encoder
    
    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
        
        // Default outputs
        led = 8h00              // turn LEDs off
        io_segment = 8h00
        io_select = 4h0
        usb_tx = usb_rx         // loop serial port
        
        // =================== DEBUGGING ===================== //
        rx.rx = usb_rx          // connect rx input
        usb_tx = tx.tx          // connect tx output
        
        debugger.new_rx = rx.new_data
        debugger.rx_data = rx.data
        
        debugger.correct_button = game_datapath.correct_button
        debugger.motor_direction = game_datapath.motor_direction
        debugger.motor_speed = game_datapath.motor_speed
        debugger.p0_score = game_datapath.p0_score
        debugger.p1_score = game_datapath.p1_score
        debugger.correct_button_compare = game_datapath.correct_button_compare
        debugger.counter = game_datapath.counter
        debugger.temp = game_datapath.temp
        debugger.temp1 = game_datapath.temp1
        
        // Debugging inputs to regfile
        debugger.wa =game_datapath.wa
        debugger.we = game_datapath.we
        debugger.data = game_datapath.data
        debugger.a = game_datapath.a
        debugger.b = game_datapath.b
        debugger.alufn = game_datapath.alufn
        
        tx.new_data = debugger.new_tx
        tx.data = debugger.tx_data
        debugger.tx_busy = tx.busy
        
        tx.block = 0            // no flow control, do not block
        
        // ================== Connecting the FPGA modules =================== //
        // Connect p0, p1 and center button conditioner to edge detector
        p0_button_cond.in = p0_button
        p1_button_cond.in = p1_button
        center_button_cond.in = center_button
        p0_button_edge.in = p0_button_cond.out
        p1_button_edge.in = p1_button_cond.out
        center_button_edge.in = center_button_cond.out
        
        // Connect the HIGH edge detector to the datapath
        game_datapath.p0b0 = p0_button_edge.out[0]
        game_datapath.p0b1 = p0_button_edge.out[1]
        game_datapath.p0wall = p0_button_cond.out[2]
        game_datapath.p1b0 = p1_button_edge.out[0]
        game_datapath.p1b1 = p1_button_edge.out[1]
        game_datapath.p1wall = p1_button_cond.out[2]
        game_datapath.center_button = center_button_cond.out
        
        // ================== CONNECTING PHYSICAL OUTPUTS =================== //
        // Connect motor
        motorIN1 = motor.in1
        motorIN2 = motor.in2
        
        // Connect button LEDs
        p0l0 = game_datapath.correct_button_compare[1]
        p0l1 = game_datapath.correct_button_compare[0]
        p1l0 = game_datapath.correct_button_compare[1]
        p1l1 = game_datapath.correct_button_compare[0]
        
        // Connect player score LEDs
        p0_led_encoder.score_in = game_datapath.p0_score[1:0]
        p1_led_encoder.score_in = game_datapath.p1_score[1:0]
        p0_score = p0_led_encoder.score_out
        p1_score = p1_led_encoder.score_out
    }
}