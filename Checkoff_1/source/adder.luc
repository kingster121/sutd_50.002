module adder #(
    SIZE ~ 32 : SIZE > 1
)(
    input a[SIZE],
    input b[SIZE],
    input alufn_signal[6],
    output alu_out[SIZE],
    output z, // zero
    output v, // overflow
    output n  // negative
) {
    rca rca(#SIZE(32))
    sig xb[SIZE]
    
    always {
        // implement adder/subtractor unit logic here
        alu_out = 0
        z = 0
        v = 0 
        n = 0
        
        rca.a = a
        // Unable to always just do this since the signal might have subtract where we need to 2's complement b
        // rca.b = b
        xb = b ^ 32x{alufn_signal[0]} // alufn_signal for add -> 0; alufn_signal[0] for subtract -> 1
        rca.b = xb
        rca.cin = alufn_signal[0] // This is genius. If alufn_signal means subtract, we carry 1 over to complete the 2's complement
        
        alu_out = rca.s
        z = ~|rca.s // NOR
        v = ((a[SIZE-1] & xb[SIZE-1] & ~rca.s[SIZE-1]) | (~(a[SIZE-1]) & ~xb[SIZE-1] & rca.s[SIZE-1]))
        n = rca.s[SIZE-1]
    }
}