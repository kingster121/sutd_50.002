module test_cases (
    input test_address[8],
    output a[32],
    output b[32],
    output alufn_signal[6],
    output answer[32]
) {
    always {
        case (test_address){
            // ----------------ADDITION TEST CASE--------------- //
            // 0 + 0 = 0
            8h01:
                a = 32h00000000
                b = 32h00000000
                alufn_signal = 6b000000
                answer = 32h00000000
            
            // 0 + A = A
            8h02:
                a = 32h00000000
                b = 32h00003000
                alufn_signal = 6b000000
                answer = 32h00003000
            
            // A + 0 = A
            8h03:
                a = 32h00003000
                b = 32h00000000
                alufn_signal = 6b000000
                answer = 32h00003000
            
            // pos + pos = pos, no overflow
            // 16 + 32 = 48
            8h04:
                a = 32h00000010
                b = 32h00000020
                alufn_signal = 6b000000
                answer = 32h00000030
            
            // BELOW THIS POINT NEED CHANGE NUMBER
            // BELOW THIS POINT NEED CHANGE NUMBER
            // BELOW THIS POINT NEED CHANGE NUMBER
            
            // neg + pos = neg, no overflow
            // -250 + 20 = -230
            8h05:
                a = 32hFFFFFF06  // -250 in two’s complement
                b = 32h00000014  // 20
                alufn_signal = 6b000000
                answer = 32hFFFFFF1A  // -230
            
            // pos + neg = neg, no overflow
            // 5 + (-100) = -95
            8h06:
                a = 32h00000005  // 5
                b = 32hFFFFFF9C  // -100 in two’s complement
                alufn_signal = 6b000000
                answer = 32hFFFFFFA3  // -95
            
            // neg + neg = neg, no overflow
            // -1 + -1 = -2
            8h07:
                a = 32hFFFFFFFF  // -1 in two’s complement
                b = 32hFFFFFFFF  // -1 in two’s complement
                alufn_signal = 6b000000
                answer = 32hFFFFFFFE  // -2
            
            // pos + pos = neg, overflow
            // (2^30-1) + 1 = -2^31 (overflow)
            8h08:
                a = 32h7FFFFFFF  // 2^31 - 1
                b = 32h00000001  // 1
                alufn_signal = 6b000000
                answer = 32h80000000  // -2^31 (overflow)
            
            
            // neg + neg = pos, overflow
            // (-2^31) + (-1) = 2^31-1 (overflow)
            8h09:
                a = 32h80000000  // -2^31
                b = 32hFFFFFFFF  // -1
                alufn_signal = 6b000000
                answer = 32h7FFFFFFF  // Overflow, wraps around to 2^31-1
            
            // A + (-A) = 0, no overflow
            // 8 + (-8) = 0
            8h0A:
                a = 32h00000008  // 8
                b = 32hFFFFFFF8  // -8 in two’s complement
                alufn_signal = 6b000000
                answer = 32h00000000  // 0
            
            // ----------------SUBTRACTION TEST CASE--------------- //
            // 0 - 0 = 0, no overflow
            8h0B:
                a = 32h00000000
                b = 32h00000000
                alufn_signal = 6b000001
                answer = 32h00000000
            
            // A - 0 = A, no overflow
            8h0C:
                a = 32h00000005
                b = 32h00000000
                alufn_signal = 6b000001
                answer = 32h00000005
            
            // 0 - A = -A, no overflow
            8h0D:
                a = 32h00000000
                b = 32h00000007
                alufn_signal = 6b000001
                answer = 32hFFFFFFF9
            
            // pos - pos = pos, no overflow
            // 250 - 20 = 230
            8h0E:
                a = 32h000000FA
                b = 32h00000014
                alufn_signal = 6b000001
                answer = 32h000000E6
            
            // pos - pos = neg, no overflow
            // 20 - 250 = -230
            8h0F:
                a = 32h00000014
                b = 32h000000FA
                alufn_signal = 6b000001
                answer = 32hFFFFFF16
            
            // pos - neg = pos, no overflow
            // 100 - (-50) = 150
            8h10:
                a = 32h00000064
                b = 32hFFFFFFCE
                alufn_signal = 6b000001
                answer = 32h00000096
            
            // pos - neg = neg, overflow
            // (2^31-1) - (-1) = -2^31 (overflow)
            8h11:
                a = 32h7FFFFFFF
                b = 32hFFFFFFFF
                alufn_signal = 6b000001
                answer = 32h80000000  // Overflow occurs
            
            // neg - pos = neg, no overflow
            // -16 - 32 = -48
            8h12:
                a = 32hFFFFFFF0
                b = 32h00000020
                alufn_signal = 6b000001
                answer = 32hFFFFFFD0
            
            // neg - pos = pos, overflow
            // (-2^31) - 1 = 2^31-1 (overflow)
            8h13:
                a = 32h80000000
                b = 32h00000001
                alufn_signal = 6b000001
                answer = 32h7FFFFFFF  // Overflow occurs
            
            // neg - neg = neg, no overflow
            // -16 - (-8) = -8
            8h14:
                a = 32hFFFFFFF0
                b = 32hFFFFFFF8
                alufn_signal = 6b000001
                answer = 32hFFFFFFF8
            
            // neg - neg = pos, overflow
            // -1 - (-2^31) = 2^31 - 1 (overflow)
            8h15:
                a = 32hFFFFFFFF
                b = 32h80000000
                alufn_signal = 6b000001
                answer = 32h7FFFFFFF  // Overflow occurs
            
            // 0 - (2^31-1) = -2^31 + 1, no overflow
            8h16:
                a = 32h00000000
                b = 32h7FFFFFFF
                alufn_signal = 6b000001
                answer = 32h80000001
            
            // ----------------MULTIPLICATION TEST CASE------------------- //
            // A * 0 = 0
            8h17:
                a = 32h00000010
                b = 32h00000000
                alufn_signal = 6b000010
                answer = 32h00000000
            // 0 * A = 0
            8h18:
                a = 32h00000000
                b = 32h00000010
                alufn_signal = 6b000010
                answer = 32h00000000
            
            // 1 * A = A
            8h19:
                a = 32h00000001
                b = 32h00000100
                alufn_signal = 6b000010
                answer = 32h00000100
            
            // A * 1 = A
            8h20:
                a = 32h00000100
                b = 32h00000001
                alufn_signal = 6b000010
                answer = 32h00000100
            
            // pos * pos = pos, no overflow
            // 16 * 4 = 64
            8h21:
                a = 32h00000010
                b = 32h00000004
                alufn_signal = 6b000010
                answer = 32h00000040
            
            // pos * pos = pos, overflow
            // (2^30 + 1) * (2^30 + 1) = 2
            8h22:
                a = 32h40000001
                b = 32h40000001
                alufn_signal = 6b000010
                answer = 32h00000010
            
            // neg * pos = neg, no overflow
            // -1 * 4 = -4
            8h23:
                a = 32hFFFFFFFF
                b = 32h40000004
                alufn_signal = 6b000010
                answer = 32hFFFFFFFC
            
            // pos * neg = neg, no overflow
            // 4 * -1 = -4
            8h24:
                a = 32h40000004
                b = 32hFFFFFFFF
                alufn_signal = 6b000010
                answer = 32hFFFFFFFC
            
            // neg * neg = pos, no overflow
            // -4 * -2 = 8
            8h25:
                a = 32hFFFFFFFC
                b = 32hFFFFFFFE
                alufn_signal = 6b000010
                answer = 32h00000008
            
            // ----------------------AND TEST CASES------------------------//
            // All ones and all zeros = 0
            8h26:
                a = 32hFFFFFFFF
                b = 32h00000000
                alufn_signal = 6b011000
                answer = 32h00000000
            
            // A and all ones = A
            8h27:
                a = 32h00000010
                b = 32hFFFFFFFF
                alufn_signal = 6b011000
                answer = 32h00000010
            
            // A and all zeros = 0
            8h28:
                a = 32h00000010
                b = 32h00000000
                alufn_signal = 6b011000
                answer = 32h00000000
            
            // A and A = A
            8h29:
                a = 32h00000010
                b = 32h00000010
                alufn_signal = 6b011000
                answer = 32h00000010
            
            // A and ~A = 0
            8h30:
                a = 32h00000010
                b = 32hFFFFFFEF
                alufn_signal = 6b011000
                answer = 32h00000000
            
            // -----------------------OR TEST CASES-----------------------//
            // A OR 0 = A
            8h30:
                a = 32h00000010
                b = 32h00000000
                alufn_signal = 6b011110
                answer = 32h00000010
            
            // A or all ones = all ones
            8h30:
                a = 32h00000010
                b = 32hFFFFFFFF
                alufn_signal = 6b011110
                answer = 32hFFFFFFFF
            
            // A or A = A
            8h30:
                a = 32h00000011
                b = 32h00000011
                alufn_signal = 6b011110
                answer = 32h00000011
            
            // A or ~A = all ones
            8h30:
                a = 32h00000010
                b = 32hFFFFFFEF
                alufn_signal = 6b011000
                answer = 32hFFFFFFFF
            
            // ---------------------XOR TEST CASES------------------------//
            // A XOR 0s = A
            8h18:
                a = 32h00000001
                b = 32h00000000
                alufn_signal = 6b010110
                answer = 32h00000001
            
            // A XOR 1s = ~A
            8h18:
                a = 32h00000001
                b = 32hFFFFFFFF
                alufn_signal = 6b010110
                answer = 32hFFFFFFFE
            
            // A XOR A = all zeros
            8h18:
                a = 32h0000FFFF
                b = 32h0000FFFF
                alufn_signal = 6b010110
                answer = 32h00000000
            
            // A XOR ~A = all ones
            8h18:
                a = 32hFFFF0000
                b = 32h0000FFFF
                alufn_signal = 6b010110
                answer = 32hFFFFFFFF
            
            // ---------------------"A" TEST CASES-------------------------//
            // A = A
            8h30:
                a = 32h0000001F
                b = 32hFFFFFFEF
                alufn_signal = 6b011010
                answer = 32h0000001F
            
            // ---------------------SHL TEST CASE-------------------------//
            // A SHL(0) = A
            8h30:
                a = 32h0000001F
                b = 32h00000000
                alufn_signal = 6b100000
                answer = 32h0000001F
            
            // A SHL(31) = lsb become msb
            8h30:
                a = 32h00000001
                b = 32h0000001E
                alufn_signal = 6b100000
                answer = 32h10000000
            
            // A SHL(5) = just check
            8h30:
                a = 32h00000001
                b = 32h00000005
                alufn_signal = 6b100000
                answer = 32h00000040
            
            // --------------------SHR TEST CASES----------------------------//
            // A SHR(0) = A
            8h30:
                a = 32h0000001F
                b = 32h00000000
                alufn_signal = 6b100001
                answer = 32h0000001F
            
            // A SHR(30) = msb become lsb
            8h30:
                a = 32h10000000
                b = 32h0000001E
                alufn_signal = 6b100000
                answer = 32h00000001
            
            // A SHR(5) = just check
            8h30:
                a = 32h10000000
                b = 32h00000005
                alufn_signal = 6b100000
                answer = 32h04000000
            
            // --------------------SRA TEST CASES-----------------------------//
            // -A SRA(2) = preserves sign, essentially making it divide by 4
            // -2^32 SRA(2) = -2^31
            8h30:
                a = 32h80000000
                b = 32h00000010
                alufn_signal = 6b100000
                answer = 32h40000000
            
            // ----------------------CMPEQ TEST CASES-------------------------//
            // A =/= B = FALSE
            8h30:
                a = 32h80000FFF
                b = 32h00000010
                alufn_signal = 6b110011
                answer = 32h00000000
            
            // A == B = TRUE
            8h30:
                a = 32h80000FFF
                b = 32h00000FFF
                alufn_signal = 6b110011
                answer = 32h00000001
            
            // -----------------------CMPLT TEST CASES-----------------------//
            // A < B = TRUE
            8h30:
                a = 32h8000000F
                b = 32h00000FFF
                alufn_signal = 6b110101
                answer = 32h00000001
            
            // A == B = FALSE
            8h30:
                a = 32h80000FFF
                b = 32h00000FFF
                alufn_signal = 6b110101
                answer = 32h00000000
            
            // A > B = FALSE
            8h30:
                a = 32h80001000
                b = 32h00000FFF
                alufn_signal = 6b110101
                answer = 32h00000000
            
            // -----------------------CMPLE TEST CASES------------------------//
            // A < B = TRUE
            8h30:
                a = 32h800000F0
                b = 32h00000FFF
                alufn_signal = 6b110011
                answer = 32h00000001
            
            // A == B = TRUE
            8h30:
                a = 32h800000F0
                b = 32h000000F0
                alufn_signal = 6b110011
                answer = 32h00000001
            
            // A > B = FALSE
            8h30:
                a = 32h800000F1
                b = 32h000000F0
                alufn_signal = 6b110011
                answer = 32h00000001
            
            // Sets everything to 0
            default:
                a = 32h00000000
                b = 32h00000000
                alufn_signal = 6b000001
                answer = 32h00000000
        }
    }
}