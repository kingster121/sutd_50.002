/*
    This file was generated automatically by Alchitry Labs 2.0.24-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module shifter #(
        parameter SIZE = 6'h20
    ) (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn_signal,
        output reg [31:0] shift
    );
    logic [4:0] R_04d0c2ed_i;
    logic [5:0] RR_04d0c2ed_i;
    logic [31:0] M_mux_2_32_s0;
    logic [31:0][1:0] M_mux_2_32_in;
    logic [31:0] M_mux_2_32_out;
    
    genvar idx_0_73737014;
    
    generate
        for (idx_0_73737014 = 0; idx_0_73737014 < 32; idx_0_73737014 = idx_0_73737014 + 1) begin: forLoop_idx_0_73737014
            mux_2 mux_2_32 (
                .s0(M_mux_2_32_s0[idx_0_73737014]),
                .in(M_mux_2_32_in[idx_0_73737014]),
                .out(M_mux_2_32_out[idx_0_73737014])
            );
        end
    endgenerate
    
    
    localparam _MP_SHIFT_1783718264 = 5'h10;
    logic [31:0] M_shifter16L_out;
    
    x_bit_left_shifter #(
        .SHIFT(_MP_SHIFT_1783718264)
    ) shifter16L (
        .a(a),
        .shift(b[3'h4]),
        .pad(1'h0),
        .out(M_shifter16L_out)
    );
    
    
    localparam _MP_SHIFT_49786089 = 4'h8;
    logic [31:0] M_shifter8L_out;
    
    x_bit_left_shifter #(
        .SHIFT(_MP_SHIFT_49786089)
    ) shifter8L (
        .a(M_shifter16L_out),
        .shift(b[2'h3]),
        .pad(1'h0),
        .out(M_shifter8L_out)
    );
    
    
    localparam _MP_SHIFT_1024669048 = 3'h4;
    logic [31:0] M_shifter4L_out;
    
    x_bit_left_shifter #(
        .SHIFT(_MP_SHIFT_1024669048)
    ) shifter4L (
        .a(M_shifter8L_out),
        .shift(b[2'h2]),
        .pad(1'h0),
        .out(M_shifter4L_out)
    );
    
    
    localparam _MP_SHIFT_1169605107 = 2'h2;
    logic [31:0] M_shifter2L_out;
    
    x_bit_left_shifter #(
        .SHIFT(_MP_SHIFT_1169605107)
    ) shifter2L (
        .a(M_shifter4L_out),
        .shift(b[1'h1]),
        .pad(1'h0),
        .out(M_shifter2L_out)
    );
    
    
    localparam _MP_SHIFT_1458298475 = 1'h1;
    logic [31:0] M_shifter1L_out;
    
    x_bit_left_shifter #(
        .SHIFT(_MP_SHIFT_1458298475)
    ) shifter1L (
        .a(M_shifter2L_out),
        .shift(b[1'h0]),
        .pad(1'h0),
        .out(M_shifter1L_out)
    );
    
    
    localparam _MP_SHIFT_1636518180 = 5'h10;
    logic [31:0] M_shifter16R_out;
    
    x_bit_right_shifter #(
        .SHIFT(_MP_SHIFT_1636518180)
    ) shifter16R (
        .a(a),
        .shift(b[3'h4]),
        .pad(alufn_signal[1'h1] & a[5'h1f]),
        .out(M_shifter16R_out)
    );
    
    
    localparam _MP_SHIFT_1369160887 = 4'h8;
    logic [31:0] M_shifter8R_out;
    
    x_bit_right_shifter #(
        .SHIFT(_MP_SHIFT_1369160887)
    ) shifter8R (
        .a(M_shifter16R_out),
        .shift(b[2'h3]),
        .pad(alufn_signal[1'h1] & a[5'h1f]),
        .out(M_shifter8R_out)
    );
    
    
    localparam _MP_SHIFT_124771660 = 3'h4;
    logic [31:0] M_shifter4R_out;
    
    x_bit_right_shifter #(
        .SHIFT(_MP_SHIFT_124771660)
    ) shifter4R (
        .a(M_shifter8R_out),
        .shift(b[2'h2]),
        .pad(alufn_signal[1'h1] & a[5'h1f]),
        .out(M_shifter4R_out)
    );
    
    
    localparam _MP_SHIFT_925633145 = 2'h2;
    logic [31:0] M_shifter2R_out;
    
    x_bit_right_shifter #(
        .SHIFT(_MP_SHIFT_925633145)
    ) shifter2R (
        .a(M_shifter4R_out),
        .shift(b[1'h1]),
        .pad(alufn_signal[1'h1] & a[5'h1f]),
        .out(M_shifter2R_out)
    );
    
    
    localparam _MP_SHIFT_103360890 = 1'h1;
    logic [31:0] M_shifter1R_out;
    
    x_bit_right_shifter #(
        .SHIFT(_MP_SHIFT_103360890)
    ) shifter1R (
        .a(M_shifter2R_out),
        .shift(b[1'h0]),
        .pad(alufn_signal[1'h1] & a[5'h1f]),
        .out(M_shifter1R_out)
    );
    
    
    always @* begin
        for (RR_04d0c2ed_i = 0; RR_04d0c2ed_i < 6'h20; RR_04d0c2ed_i = RR_04d0c2ed_i + 1) begin
      R_04d0c2ed_i = (0) + RR_04d0c2ed_i * (1);
            M_mux_2_32_in[R_04d0c2ed_i][1'h0] = M_shifter1L_out[R_04d0c2ed_i];
            M_mux_2_32_in[R_04d0c2ed_i][1'h1] = M_shifter1R_out[R_04d0c2ed_i];
        end
        M_mux_2_32_s0 = {6'h20{alufn_signal[1'h0]}};
        shift = M_mux_2_32_out;
    end
    
    
endmodule