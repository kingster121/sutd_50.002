/*
    This file was generated automatically by Alchitry Labs 2.0.24-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alu (
        input wire [31:0] a,
        input wire [31:0] b,
        input wire [5:0] alufn_signal,
        output reg [31:0] alu_out,
        output reg z,
        output reg v,
        output reg n
    );
    logic [4:0] R_57d33843_i;
    logic [5:0] RR_57d33843_i;
    logic [31:0] M_mux_2_32_s0;
    logic [31:0][1:0] M_mux_2_32_in;
    logic [31:0] M_mux_2_32_out;
    
    genvar idx_0_822997839;
    
    generate
        for (idx_0_822997839 = 0; idx_0_822997839 < 32; idx_0_822997839 = idx_0_822997839 + 1) begin: forLoop_idx_0_822997839
            mux_2 mux_2_32 (
                .s0(M_mux_2_32_s0[idx_0_822997839]),
                .in(M_mux_2_32_in[idx_0_822997839]),
                .out(M_mux_2_32_out[idx_0_822997839])
            );
        end
    endgenerate
    
    
    logic [31:0] M_mux_4_32_s0;
    logic [31:0] M_mux_4_32_s1;
    logic [31:0][3:0] M_mux_4_32_in;
    logic [31:0] M_mux_4_32_out;
    
    genvar idx_0_1744560323;
    
    generate
        for (idx_0_1744560323 = 0; idx_0_1744560323 < 32; idx_0_1744560323 = idx_0_1744560323 + 1) begin: forLoop_idx_0_1744560323
            mux_4 mux_4_32 (
                .s0(M_mux_4_32_s0[idx_0_1744560323]),
                .s1(M_mux_4_32_s1[idx_0_1744560323]),
                .in(M_mux_4_32_in[idx_0_1744560323]),
                .out(M_mux_4_32_out[idx_0_1744560323])
            );
        end
    endgenerate
    
    
    logic [31:0] cmp;
    localparam _MP_SIZE_819902791 = 6'h20;
    logic [31:0] M_adder_a;
    logic [31:0] M_adder_b;
    logic [5:0] M_adder_alufn_signal;
    logic [31:0] M_adder_alu_out;
    logic M_adder_z;
    logic M_adder_v;
    logic M_adder_n;
    
    adder #(
        .SIZE(_MP_SIZE_819902791)
    ) adder (
        .a(M_adder_a),
        .b(M_adder_b),
        .alufn_signal(M_adder_alufn_signal),
        .alu_out(M_adder_alu_out),
        .z(M_adder_z),
        .v(M_adder_v),
        .n(M_adder_n)
    );
    
    
    localparam _MP_SIZE_1570184962 = 6'h20;
    logic [31:0] M_boolean_a;
    logic [31:0] M_boolean_b;
    logic [5:0] M_boolean_alufn_signal;
    logic [31:0] M_boolean_bool;
    
    boolean #(
        .SIZE(_MP_SIZE_1570184962)
    ) boolean (
        .a(M_boolean_a),
        .b(M_boolean_b),
        .alufn_signal(M_boolean_alufn_signal),
        .bool(M_boolean_bool)
    );
    
    
    localparam _MP_SIZE_168835938 = 6'h20;
    logic [31:0] M_shifter_a;
    logic [4:0] M_shifter_b;
    logic [5:0] M_shifter_alufn_signal;
    logic [31:0] M_shifter_shift;
    
    shifter #(
        .SIZE(_MP_SIZE_168835938)
    ) shifter (
        .a(M_shifter_a),
        .b(M_shifter_b),
        .alufn_signal(M_shifter_alufn_signal),
        .shift(M_shifter_shift)
    );
    
    
    localparam _MP_SIZE_756014102 = 6'h20;
    logic M_compare_z;
    logic M_compare_v;
    logic M_compare_n;
    logic [5:0] M_compare_alufn_signal;
    logic M_compare_cmp;
    
    compare #(
        .SIZE(_MP_SIZE_756014102)
    ) compare (
        .z(M_compare_z),
        .v(M_compare_v),
        .n(M_compare_n),
        .alufn_signal(M_compare_alufn_signal),
        .cmp(M_compare_cmp)
    );
    
    
    localparam _MP_SIZE_387899423 = 6'h20;
    logic [31:0] M_multiplier_a;
    logic [31:0] M_multiplier_b;
    logic [31:0] M_multiplier_mul;
    
    multiplier #(
        .SIZE(_MP_SIZE_387899423)
    ) multiplier (
        .a(M_multiplier_a),
        .b(M_multiplier_b),
        .mul(M_multiplier_mul)
    );
    
    
    always @* begin
        M_adder_a = a;
        M_adder_b = b;
        M_adder_alufn_signal = alufn_signal;
        M_multiplier_a = a;
        M_multiplier_b = b;
        M_boolean_a = a;
        M_boolean_b = b;
        M_boolean_alufn_signal = alufn_signal;
        M_shifter_a = a;
        M_shifter_b = b[3'h4:1'h0];
        M_shifter_alufn_signal = alufn_signal;
        M_compare_z = M_adder_z;
        M_compare_v = M_adder_v;
        M_compare_n = M_adder_n;
        M_compare_alufn_signal = alufn_signal;
        cmp = {31'h0, M_compare_cmp};
        for (RR_57d33843_i = 0; RR_57d33843_i < 6'h20; RR_57d33843_i = RR_57d33843_i + 1) begin
      R_57d33843_i = (0) + RR_57d33843_i * (1);
            M_mux_2_32_in[R_57d33843_i][1'h0] = M_adder_alu_out[R_57d33843_i];
            M_mux_2_32_in[R_57d33843_i][1'h1] = M_multiplier_mul[R_57d33843_i];
            M_mux_2_32_s0[R_57d33843_i] = alufn_signal[1'h1];
            M_mux_4_32_in[R_57d33843_i][1'h0] = M_mux_2_32_out[R_57d33843_i];
            M_mux_4_32_in[R_57d33843_i][1'h1] = M_boolean_bool[R_57d33843_i];
            M_mux_4_32_in[R_57d33843_i][2'h2] = M_shifter_shift[R_57d33843_i];
            M_mux_4_32_in[R_57d33843_i][2'h3] = cmp[R_57d33843_i];
            M_mux_4_32_s1[R_57d33843_i] = alufn_signal[3'h5];
            M_mux_4_32_s0[R_57d33843_i] = alufn_signal[3'h4];
        end
        alu_out = M_mux_4_32_out;
        z = M_adder_z;
        v = M_adder_v;
        n = M_adder_n;
    end
    
    
endmodule